
adafruit-f405-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800893c  0800893c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008944  08008944  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800894c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  200001e4  08008b30  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b44  08008b30  00021b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c62  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002def  00000000  00000000  00034e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00037c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021707  00000000  00000000  000396e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dec5  00000000  00000000  0005adef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb682  00000000  00000000  00068cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  001243b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008874 	.word	0x08008874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008874 	.word	0x08008874

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b08d      	sub	sp, #52	; 0x34
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	  FRESULT fres;
	  uint16_t raw_temp;
	  float temp_c;
	  char log_path[] = "/TEMPLOG.TXT";
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <main+0xe8>)
 8000dc4:	f107 0418 	add.w	r4, r7, #24
 8000dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dca:	c407      	stmia	r4!, {r0, r1, r2}
 8000dcc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fb1f 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f86f 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 f903 	bl	8000fe0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dda:	f000 f8d3 	bl	8000f84 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000dde:	f006 fc01 	bl	80075e4 <MX_USB_DEVICE_Init>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
//	  HAL_Delay(1000);
	  // Attempt to read temperature from sensor
	     raw_temp = ReadPCTTemperature(PCT_I2C_ADDR);
 8000de2:	236e      	movs	r3, #110	; 0x6e
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f959 	bl	800109c <ReadPCTTemperature>
 8000dea:	4603      	mov	r3, r0
 8000dec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	     if ( raw_temp == PCT_ERROR ) {
 8000dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d104      	bne.n	8000e02 <main+0x46>
	       BlinkLED(100, 5);
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 f99a 	bl	8001134 <BlinkLED>
 8000e00:	e04b      	b.n	8000e9a <main+0xde>
	     } else {

	       // Convert raw to 2's complement, since temperature can be negative
	       if ( raw_temp > 0x3FF ) {
 8000e02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e08:	d305      	bcc.n	8000e16 <main+0x5a>
	         raw_temp |= 0xF800;
 8000e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e0c:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 8000e10:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8000e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	       }

	       // Convert to float temperature value (Celsius)
	       temp_c = (int16_t)raw_temp * 0.125;
 8000e16:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb82 	bl	8000524 <__aeabi_i2d>
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000e28:	f7ff fbe6 	bl	80005f8 <__aeabi_dmul>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	4618      	mov	r0, r3
 8000e32:	4621      	mov	r1, r4
 8000e34:	f7ff fdf2 	bl	8000a1c <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28

	       // Convert temperature to decimal format (without float conversion)
	       temp_c *= 100;
 8000e3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e40:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000ea8 <main+0xec>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	       sprintf((char*)buf,
	             "%u.u C\r\n",
	             ((unsigned int)temp_c / 100),
 8000e4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e54:	ee17 2a90 	vmov	r2, s15
	       sprintf((char*)buf,
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <main+0xf0>)
 8000e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8000e5e:	095c      	lsrs	r4, r3, #5
	             ((unsigned int)temp_c % 100));
 8000e60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e68:	ee17 2a90 	vmov	r2, s15
	       sprintf((char*)buf,
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <main+0xf0>)
 8000e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2164      	movs	r1, #100	; 0x64
 8000e76:	fb01 f303 	mul.w	r3, r1, r3
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	1d38      	adds	r0, r7, #4
 8000e7e:	4622      	mov	r2, r4
 8000e80:	490b      	ldr	r1, [pc, #44]	; (8000eb0 <main+0xf4>)
 8000e82:	f007 f9a9 	bl	80081d8 <siprintf>

	       // Print temperature to console
	       CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9a1 	bl	80001d0 <strlen>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fc63 	bl	8007760 <CDC_Transmit_FS>
//	         BlinkLED(200, 3);
//	       }
	     }

	     // Wait before sampling again
	     HAL_Delay(1000);
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	f000 fb29 	bl	80014f4 <HAL_Delay>
	     raw_temp = ReadPCTTemperature(PCT_I2C_ADDR);
 8000ea2:	e79e      	b.n	8000de2 <main+0x26>
 8000ea4:	08008898 	.word	0x08008898
 8000ea8:	42c80000 	.word	0x42c80000
 8000eac:	51eb851f 	.word	0x51eb851f
 8000eb0:	0800888c 	.word	0x0800888c

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2230      	movs	r2, #48	; 0x30
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 f8c8 	bl	8008058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <SystemClock_Config+0xc8>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <SystemClock_Config+0xc8>)
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <SystemClock_Config+0xc8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <SystemClock_Config+0xcc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <SystemClock_Config+0xcc>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <SystemClock_Config+0xcc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000f24:	2306      	movs	r3, #6
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f28:	2348      	movs	r3, #72	; 0x48
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f30:	2303      	movs	r3, #3
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fff9 	bl	8003f30 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f44:	f000 f91c 	bl	8001180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2102      	movs	r1, #2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fa53 	bl	8004410 <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f70:	f000 f906 	bl	8001180 <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3750      	adds	r7, #80	; 0x50
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <MX_I2C1_Init+0x54>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_I2C1_Init+0x58>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fc2:	f000 fe79 	bl	8001cb8 <HAL_I2C_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f8d8 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000210 	.word	0x20000210
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	000186a0 	.word	0x000186a0

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_GPIO_Init+0xb4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <MX_GPIO_Init+0xb4>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <MX_GPIO_Init+0xb4>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_GPIO_Init+0xb4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xb8>)
 800106c:	f000 fe0a 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001070:	2302      	movs	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xb8>)
 8001088:	f000 fb68 	bl	800175c <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800

0800109c <ReadPCTTemperature>:

/* USER CODE BEGIN 4 */

// Read temperature from PCT2075
uint16_t ReadPCTTemperature(uint8_t i2c_addr) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  uint8_t buf[2];
  uint16_t val;

  // Tell PCT2075 that we want to read from the temperature register
  buf[0] = PCT_REG_TEMP;
 80010a6:	2300      	movs	r3, #0
 80010a8:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(&hi2c1, PCT_I2C_ADDR, buf, 1, I2C_DELAY);
 80010aa:	236e      	movs	r3, #110	; 0x6e
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	f107 0208 	add.w	r2, r7, #8
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	481d      	ldr	r0, [pc, #116]	; (8001130 <ReadPCTTemperature+0x94>)
 80010bc:	f000 ff64 	bl	8001f88 <HAL_I2C_Master_Transmit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]

  // If the I2C device has just been hot-plugged, reset the peripheral
  if ( ret == HAL_BUSY ) {
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d109      	bne.n	80010de <ReadPCTTemperature+0x42>
    if (HAL_I2C_DeInit(&hi2c1) != HAL_OK){
 80010ca:	4819      	ldr	r0, [pc, #100]	; (8001130 <ReadPCTTemperature+0x94>)
 80010cc:	f000 ff2c 	bl	8001f28 <HAL_I2C_DeInit>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <ReadPCTTemperature+0x3e>
      Error_Handler();
 80010d6:	f000 f853 	bl	8001180 <Error_Handler>
    }
    MX_I2C1_Init();
 80010da:	f7ff ff53 	bl	8000f84 <MX_I2C1_Init>
  }

  // Throw error if communication not OK
  if ( ret != HAL_OK ) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <ReadPCTTemperature+0x4e>
    return PCT_ERROR;
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	e01d      	b.n	8001126 <ReadPCTTemperature+0x8a>
  }

  // Read 2 bytes from the temperature register
  ret = HAL_I2C_Master_Receive(&hi2c1, PCT_I2C_ADDR, buf, 2, I2C_DELAY);
 80010ea:	236e      	movs	r3, #110	; 0x6e
 80010ec:	b299      	uxth	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	f107 0208 	add.w	r2, r7, #8
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <ReadPCTTemperature+0x94>)
 80010fc:	f001 f842 	bl	8002184 <HAL_I2C_Master_Receive>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
  if ( ret != HAL_OK ) {
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <ReadPCTTemperature+0x74>
    return PCT_ERROR;
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	e00a      	b.n	8001126 <ReadPCTTemperature+0x8a>
  }

  // Combine the bytes and return raw value
  val = ((uint16_t)buf[0] << 3) | (buf[1] >> 5);
 8001110:	7a3b      	ldrb	r3, [r7, #8]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	b21a      	sxth	r2, r3
 8001116:	7a7b      	ldrb	r3, [r7, #9]
 8001118:	095b      	lsrs	r3, r3, #5
 800111a:	b2db      	uxtb	r3, r3
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	81bb      	strh	r3, [r7, #12]

  return val;
 8001124:	89bb      	ldrh	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000210 	.word	0x20000210

08001134 <BlinkLED>:

// Blink onboard LED
void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e012      	b.n	800116c <BlinkLED+0x38>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2102      	movs	r1, #2
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <BlinkLED+0x48>)
 800114c:	f000 fd9a 	bl	8001c84 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f9cf 	bl	80014f4 <HAL_Delay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2102      	movs	r1, #2
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <BlinkLED+0x48>)
 800115c:	f000 fd92 	bl	8001c84 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f9c7 	bl	80014f4 <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbe8      	blt.n	8001146 <BlinkLED+0x12>
  }
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40020800 	.word	0x40020800

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_I2C_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_I2C_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_I2C_MspInit+0x88>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_I2C_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121e:	23c0      	movs	r3, #192	; 0xc0
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001222:	2312      	movs	r3, #18
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122e:	2304      	movs	r3, #4
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <HAL_I2C_MspInit+0x8c>)
 800123a:	f000 fa8f 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_I2C_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_I2C_MspInit+0x88>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_I2C_MspInit+0x88>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40005400 	.word	0x40005400
 8001268:	40023800 	.word	0x40023800
 800126c:	40020400 	.word	0x40020400

08001270 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_I2C_MspDeInit+0x38>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10d      	bne.n	800129e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_I2C_MspDeInit+0x3c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_I2C_MspDeInit+0x3c>)
 8001288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <HAL_I2C_MspDeInit+0x40>)
 8001292:	f000 fbfd 	bl	8001a90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_I2C_MspDeInit+0x40>)
 800129a:	f000 fbf9 	bl	8001a90 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005400 	.word	0x40005400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020400 	.word	0x40020400

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f8d4 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <OTG_FS_IRQHandler+0x10>)
 8001316:	f001 fdd8 	bl	8002eca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20001738 	.word	0x20001738

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f006 fe46 	bl	8007fe4 <__errno>
 8001358:	4602      	mov	r2, r0
 800135a:	230c      	movs	r3, #12
 800135c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20020000 	.word	0x20020000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000200 	.word	0x20000200
 800138c:	20001b48 	.word	0x20001b48

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <SystemInit+0x28>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <SystemInit+0x28>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SystemInit+0x28>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	609a      	str	r2, [r3, #8]
#endif
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013c2:	e003      	b.n	80013cc <LoopCopyDataInit>

080013c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ca:	3104      	adds	r1, #4

080013cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013d4:	d3f6      	bcc.n	80013c4 <CopyDataInit>
  ldr  r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013d8:	e002      	b.n	80013e0 <LoopFillZerobss>

080013da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013dc:	f842 3b04 	str.w	r3, [r2], #4

080013e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013e4:	d3f9      	bcc.n	80013da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ffd3 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f006 fe01 	bl	8007ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fce5 	bl	8000dbc <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013f8:	0800894c 	.word	0x0800894c
  ldr  r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001400:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001404:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001408:	20001b44 	.word	0x20001b44

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f94d 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fea4 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f965 	bl	8001742 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001490:	f000 f92d 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000264 	.word	0x20000264

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000264 	.word	0x20000264

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_Delay+0x40>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000008 	.word	0x20000008

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff3e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff31 	bl	800159c <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e16b      	b.n	8001a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 815a 	bne.w	8001a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d00b      	beq.n	80017b6 <HAL_GPIO_Init+0x5a>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017aa:	2b11      	cmp	r3, #17
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0xfc>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b12      	cmp	r3, #18
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80b4 	beq.w	8001a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <HAL_GPIO_Init+0x308>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <HAL_GPIO_Init+0x308>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_GPIO_Init+0x308>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a5a      	ldr	r2, [pc, #360]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <HAL_GPIO_Init+0x310>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0x226>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <HAL_GPIO_Init+0x314>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x222>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_GPIO_Init+0x318>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x21e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_GPIO_Init+0x31c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x320>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x324>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x212>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x328>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x32c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x20a>
 8001962:	2307      	movs	r3, #7
 8001964:	e00e      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001966:	2308      	movs	r3, #8
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196a:	2306      	movs	r3, #6
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x228>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x228>
 8001982:	2300      	movs	r3, #0
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001994:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_GPIO_Init+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c6:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <HAL_GPIO_Init+0x330>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_GPIO_Init+0x330>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_GPIO_Init+0x330>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_GPIO_Init+0x330>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_GPIO_Init+0x330>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_GPIO_Init+0x330>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_GPIO_Init+0x330>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	f67f ae90 	bls.w	8001778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3724      	adds	r7, #36	; 0x24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40013c00 	.word	0x40013c00

08001a90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e0cd      	b.n	8001c48 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	f040 80bd 	bne.w	8001c42 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ac8:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <HAL_GPIO_DeInit+0x1cc>)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a5c      	ldr	r2, [pc, #368]	; (8001c60 <HAL_GPIO_DeInit+0x1d0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02b      	beq.n	8001b4a <HAL_GPIO_DeInit+0xba>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a5b      	ldr	r2, [pc, #364]	; (8001c64 <HAL_GPIO_DeInit+0x1d4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d025      	beq.n	8001b46 <HAL_GPIO_DeInit+0xb6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a5a      	ldr	r2, [pc, #360]	; (8001c68 <HAL_GPIO_DeInit+0x1d8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01f      	beq.n	8001b42 <HAL_GPIO_DeInit+0xb2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a59      	ldr	r2, [pc, #356]	; (8001c6c <HAL_GPIO_DeInit+0x1dc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_DeInit+0xae>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_GPIO_DeInit+0x1e0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_DeInit+0xaa>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a57      	ldr	r2, [pc, #348]	; (8001c74 <HAL_GPIO_DeInit+0x1e4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_DeInit+0xa6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_GPIO_DeInit+0x1e8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_DeInit+0xa2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_GPIO_DeInit+0x1ec>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_DeInit+0x9e>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e00e      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e00c      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b32:	2306      	movs	r3, #6
 8001b34:	e00a      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b36:	2305      	movs	r3, #5
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_DeInit+0xbc>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d132      	bne.n	8001bc2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001b5c:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4946      	ldr	r1, [pc, #280]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b6a:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4943      	ldr	r1, [pc, #268]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	493f      	ldr	r1, [pc, #252]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	493c      	ldr	r1, [pc, #240]	; (8001c80 <HAL_GPIO_DeInit+0x1f0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ba4:	4a2d      	ldr	r2, [pc, #180]	; (8001c5c <HAL_GPIO_DeInit+0x1cc>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	4829      	ldr	r0, [pc, #164]	; (8001c5c <HAL_GPIO_DeInit+0x1cc>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	400a      	ands	r2, r1
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2103      	movs	r1, #3
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	08d2      	lsrs	r2, r2, #3
 8001bf8:	4019      	ands	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2103      	movs	r1, #3
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	f67f af2e 	bls.w	8001aac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40021c00 	.word	0x40021c00
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	619a      	str	r2, [r3, #24]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e11f      	b.n	8001f0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fa7e 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	; 0x24
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d1c:	f002 fd1c 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8001d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4a7b      	ldr	r2, [pc, #492]	; (8001f14 <HAL_I2C_Init+0x25c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d807      	bhi.n	8001d3c <HAL_I2C_Init+0x84>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a7a      	ldr	r2, [pc, #488]	; (8001f18 <HAL_I2C_Init+0x260>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e006      	b.n	8001d4a <HAL_I2C_Init+0x92>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_I2C_Init+0x264>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0db      	b.n	8001f0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a72      	ldr	r2, [pc, #456]	; (8001f20 <HAL_I2C_Init+0x268>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a64      	ldr	r2, [pc, #400]	; (8001f14 <HAL_I2C_Init+0x25c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d802      	bhi.n	8001d8c <HAL_I2C_Init+0xd4>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	e009      	b.n	8001da0 <HAL_I2C_Init+0xe8>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	4a63      	ldr	r2, [pc, #396]	; (8001f24 <HAL_I2C_Init+0x26c>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	3301      	adds	r3, #1
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4956      	ldr	r1, [pc, #344]	; (8001f14 <HAL_I2C_Init+0x25c>)
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d80d      	bhi.n	8001ddc <HAL_I2C_Init+0x124>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e59      	subs	r1, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	bf38      	it	cc
 8001dd8:	2304      	movcc	r3, #4
 8001dda:	e04f      	b.n	8001e7c <HAL_I2C_Init+0x1c4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d111      	bne.n	8001e08 <HAL_I2C_Init+0x150>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e012      	b.n	8001e2e <HAL_I2C_Init+0x176>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e58      	subs	r0, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	0099      	lsls	r1, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Init+0x17e>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e022      	b.n	8001e7c <HAL_I2C_Init+0x1c4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10e      	bne.n	8001e5c <HAL_I2C_Init+0x1a4>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e58      	subs	r0, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	440b      	add	r3, r1
 8001e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5a:	e00f      	b.n	8001e7c <HAL_I2C_Init+0x1c4>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1e58      	subs	r0, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	0099      	lsls	r1, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6809      	ldr	r1, [r1, #0]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6911      	ldr	r1, [r2, #16]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	000186a0 	.word	0x000186a0
 8001f18:	001e847f 	.word	0x001e847f
 8001f1c:	003d08ff 	.word	0x003d08ff
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	10624dd3 	.word	0x10624dd3

08001f28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e021      	b.n	8001f7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2224      	movs	r2, #36	; 0x24
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff f98c 	bl	8001270 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	817b      	strh	r3, [r7, #10]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff fa9e 	bl	80014dc <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f040 80e0 	bne.w	8002170 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2319      	movs	r3, #25
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4970      	ldr	r1, [pc, #448]	; (800217c <HAL_I2C_Master_Transmit+0x1f4>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fc58 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e0d3      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2C_Master_Transmit+0x50>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0cc      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d007      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2221      	movs	r2, #33	; 0x21
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2210      	movs	r2, #16
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_I2C_Master_Transmit+0x1f8>)
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6a3a      	ldr	r2, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fac2 	bl	80025d0 <I2C_MasterRequestWrite>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e08d      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800206c:	e066      	b.n	800213c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fcd2 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b04      	cmp	r3, #4
 8002084:	d107      	bne.n	8002096 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d11b      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x188>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d017      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	6a39      	ldr	r1, [r7, #32]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fcc2 	bl	8002a9e <I2C_WaitOnBTFFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2b04      	cmp	r3, #4
 8002126:	d107      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e01a      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d194      	bne.n	800206e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	00100002 	.word	0x00100002
 8002180:	ffff0000 	.word	0xffff0000

08002184 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	817b      	strh	r3, [r7, #10]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff f9a0 	bl	80014dc <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 820b 	bne.w	80025c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	497c      	ldr	r1, [pc, #496]	; (80023a8 <HAL_I2C_Master_Receive+0x224>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fb5a 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e1fe      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Master_Receive+0x50>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e1f7      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d007      	beq.n	80021fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2222      	movs	r2, #34	; 0x22
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_I2C_Master_Receive+0x228>)
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800223c:	8979      	ldrh	r1, [r7, #10]
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fa46 	bl	80026d4 <I2C_MasterRequestRead>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1b8      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d113      	bne.n	8002282 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e18c      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b01      	cmp	r3, #1
 8002288:	d11b      	bne.n	80022c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e16c      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d11b      	bne.n	8002302 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	e14c      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002328:	e138      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	2b03      	cmp	r3, #3
 8002330:	f200 80f1 	bhi.w	8002516 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b01      	cmp	r3, #1
 800233a:	d123      	bne.n	8002384 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fbed 	bl	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e139      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002382:	e10b      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b02      	cmp	r3, #2
 800238a:	d14e      	bne.n	800242a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	2200      	movs	r2, #0
 8002394:	4906      	ldr	r1, [pc, #24]	; (80023b0 <HAL_I2C_Master_Receive+0x22c>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fa6a 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e10e      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
 80023a6:	bf00      	nop
 80023a8:	00100002 	.word	0x00100002
 80023ac:	ffff0000 	.word	0xffff0000
 80023b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002428:	e0b8      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	4966      	ldr	r1, [pc, #408]	; (80025cc <HAL_I2C_Master_Receive+0x448>)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fa1b 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0bf      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	2200      	movs	r2, #0
 800248e:	494f      	ldr	r1, [pc, #316]	; (80025cc <HAL_I2C_Master_Receive+0x448>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f9ed 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e091      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002514:	e042      	b.n	800259c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fb00 	bl	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e04c      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d118      	bne.n	800259c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f aec2 	bne.w	800232a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	00010004 	.word	0x00010004

080025d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d006      	beq.n	80025fa <I2C_MasterRequestWrite+0x2a>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d003      	beq.n	80025fa <I2C_MasterRequestWrite+0x2a>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f8:	d108      	bne.n	800260c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e00b      	b.n	8002624 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2b12      	cmp	r3, #18
 8002612:	d107      	bne.n	8002624 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002622:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f91d 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264a:	d103      	bne.n	8002654 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e035      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002660:	d108      	bne.n	8002674 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	e01b      	b.n	80026ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	11db      	asrs	r3, r3, #7
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f003 0306 	and.w	r3, r3, #6
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f063 030f 	orn	r3, r3, #15
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <I2C_MasterRequestWrite+0xfc>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f943 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e010      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <I2C_MasterRequestWrite+0x100>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f933 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010008 	.word	0x00010008
 80026d0:	00010002 	.word	0x00010002

080026d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d006      	beq.n	800270e <I2C_MasterRequestRead+0x3a>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d003      	beq.n	800270e <I2C_MasterRequestRead+0x3a>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800270c:	d108      	bne.n	8002720 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e00b      	b.n	8002738 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	2b11      	cmp	r3, #17
 8002726:	d107      	bne.n	8002738 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002736:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f893 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275e:	d103      	bne.n	8002768 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e079      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	d108      	bne.n	8002788 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	e05f      	b.n	8002848 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002788:	897b      	ldrh	r3, [r7, #10]
 800278a:	11db      	asrs	r3, r3, #7
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0306 	and.w	r3, r3, #6
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f063 030f 	orn	r3, r3, #15
 8002798:	b2da      	uxtb	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4930      	ldr	r1, [pc, #192]	; (8002868 <I2C_MasterRequestRead+0x194>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f8b9 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e054      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4929      	ldr	r1, [pc, #164]	; (800286c <I2C_MasterRequestRead+0x198>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8a9 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e044      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f831 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d103      	bne.n	800282c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e017      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	11db      	asrs	r3, r3, #7
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0306 	and.w	r3, r3, #6
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f063 030e 	orn	r3, r3, #14
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <I2C_MasterRequestRead+0x198>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f865 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	e025      	b.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002888:	d021      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7fe fe27 	bl	80014dc <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e023      	b.n	8002916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10d      	bne.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	e00c      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	429a      	cmp	r2, r3
 8002912:	d0b6      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292c:	e051      	b.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d123      	bne.n	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e046      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298c:	d021      	beq.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7fe fda5 	bl	80014dc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e020      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10c      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf14      	ite	ne
 80029ee:	2301      	movne	r3, #1
 80029f0:	2300      	moveq	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e00b      	b.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d18d      	bne.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a28:	e02d      	b.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8ce 	bl	8002bcc <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02d      	b.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d021      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fd4b 	bl	80014dc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d116      	bne.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d1ca      	bne.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aaa:	e02d      	b.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f88d 	bl	8002bcc <I2C_IsAcknowledgeFailed>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e02d      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac2:	d021      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7fe fd0a 	bl	80014dc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d1ca      	bne.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b2c:	e042      	b.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d119      	bne.n	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0210 	mvn.w	r2, #16
 8002b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e029      	b.n	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fe fcb4 	bl	80014dc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e007      	b.n	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d1b5      	bne.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d11b      	bne.n	8002c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2c:	b08f      	sub	sp, #60	; 0x3c
 8002c2e:	af0a      	add	r7, sp, #40	; 0x28
 8002c30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e10f      	b.n	8002e5c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f004 fec8 	bl	80079ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fe95 	bl	80049aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	687e      	ldr	r6, [r7, #4]
 8002c88:	466d      	mov	r5, sp
 8002c8a:	f106 0410 	add.w	r4, r6, #16
 8002c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c9e:	1d33      	adds	r3, r6, #4
 8002ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	f001 fd6c 	bl	8004780 <USB_CoreInit>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0d0      	b.n	8002e5c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fe83 	bl	80049cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e04a      	b.n	8002d62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	333d      	adds	r3, #61	; 0x3d
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	333c      	adds	r3, #60	; 0x3c
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	b298      	uxth	r0, r3
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3342      	adds	r3, #66	; 0x42
 8002d08:	4602      	mov	r2, r0
 8002d0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	333f      	adds	r3, #63	; 0x3f
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3344      	adds	r3, #68	; 0x44
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3348      	adds	r3, #72	; 0x48
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3350      	adds	r3, #80	; 0x50
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3af      	bcc.n	8002ccc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e044      	b.n	8002dfc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3b5      	bcc.n	8002d72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	687e      	ldr	r6, [r7, #4]
 8002e0e:	466d      	mov	r5, sp
 8002e10:	f106 0410 	add.w	r4, r6, #16
 8002e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e20:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e24:	1d33      	adds	r3, r6, #4
 8002e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e28:	6838      	ldr	r0, [r7, #0]
 8002e2a:	f001 fdf9 	bl	8004a20 <USB_DevInit>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00d      	b.n	8002e5c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fe41 	bl	8005adc <USB_DevDisconnect>

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_PCD_Start+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e020      	b.n	8002ec2 <HAL_PCD_Start+0x5e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d109      	bne.n	8002ea4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d005      	beq.n	8002ea4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fd6d 	bl	8004988 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fdf1 	bl	8005a9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002eca:	b590      	push	{r4, r7, lr}
 8002ecc:	b08d      	sub	sp, #52	; 0x34
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 feaf 	bl	8005c44 <USB_GetMode>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 839d 	bne.w	8003628 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 fe13 	bl	8005b1e <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8393 	beq.w	8003626 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fe0a 	bl	8005b1e <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d107      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 0202 	and.w	r2, r2, #2
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fdf8 	bl	8005b1e <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d161      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0210 	bic.w	r2, r2, #16
 8002f46:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	3304      	adds	r3, #4
 8002f66:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	0c5b      	lsrs	r3, r3, #17
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d124      	bne.n	8002fbe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d035      	beq.n	8002fec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	6a38      	ldr	r0, [r7, #32]
 8002f94:	f002 fc5e 	bl	8005854 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa4:	441a      	add	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb6:	441a      	add	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	619a      	str	r2, [r3, #24]
 8002fbc:	e016      	b.n	8002fec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	0c5b      	lsrs	r3, r3, #17
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d110      	bne.n	8002fec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6a38      	ldr	r0, [r7, #32]
 8002fd6:	f002 fc3d 	bl	8005854 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe6:	441a      	add	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0210 	orr.w	r2, r2, #16
 8002ffa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fd8c 	bl	8005b1e <USB_ReadInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003010:	d16e      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f002 fd92 	bl	8005b44 <USB_ReadDevAllOutEpInterrupt>
 8003020:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003022:	e062      	b.n	80030ea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d057      	beq.n	80030de <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f002 fdb7 	bl	8005bac <USB_ReadDevOutEPInterrupt>
 800303e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	2301      	movs	r3, #1
 800305a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800305c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fdb0 	bl	8003bc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	461a      	mov	r2, r3
 800307c:	2308      	movs	r3, #8
 800307e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 feaa 	bl	8003ddc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309e:	461a      	mov	r2, r3
 80030a0:	2310      	movs	r3, #16
 80030a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	461a      	mov	r2, r3
 80030bc:	2320      	movs	r3, #32
 80030be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	461a      	mov	r2, r3
 80030d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	3301      	adds	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d199      	bne.n	8003024 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f002 fd12 	bl	8005b1e <USB_ReadInterrupts>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003104:	f040 80c0 	bne.w	8003288 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fd33 	bl	8005b78 <USB_ReadDevAllInEpInterrupt>
 8003112:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003118:	e0b2      	b.n	8003280 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a7 	beq.w	8003274 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f002 fd59 	bl	8005be8 <USB_ReadDevInEPInterrupt>
 8003136:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d057      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	2201      	movs	r2, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	69f9      	ldr	r1, [r7, #28]
 800315e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003162:	4013      	ands	r3, r2
 8003164:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003172:	461a      	mov	r2, r3
 8003174:	2301      	movs	r3, #1
 8003176:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d132      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3348      	adds	r3, #72	; 0x48
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4403      	add	r3, r0
 80031a0:	3344      	adds	r3, #68	; 0x44
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4419      	add	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4403      	add	r3, r0
 80031b4:	3348      	adds	r3, #72	; 0x48
 80031b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d113      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x31c>
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3350      	adds	r3, #80	; 0x50
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d108      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031de:	461a      	mov	r2, r3
 80031e0:	2101      	movs	r1, #1
 80031e2:	f002 fd61 	bl	8005ca8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f004 fc7e 	bl	8007aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	461a      	mov	r2, r3
 800320a:	2308      	movs	r3, #8
 800320c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003224:	461a      	mov	r2, r3
 8003226:	2310      	movs	r3, #16
 8003228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003240:	461a      	mov	r2, r3
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325c:	461a      	mov	r2, r3
 800325e:	2302      	movs	r3, #2
 8003260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800326c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fc1b 	bl	8003aaa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	3301      	adds	r3, #1
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	f47f af49 	bne.w	800311a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fc46 	bl	8005b1e <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329c:	d122      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d108      	bne.n	80032ce <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032c4:	2100      	movs	r1, #0
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fe26 	bl	8003f18 <HAL_PCDEx_LPM_Callback>
 80032cc:	e002      	b.n	80032d4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f004 fc84 	bl	8007bdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 fc18 	bl	8005b1e <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	d112      	bne.n	8003320 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f004 fc40 	bl	8007b90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800331e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fbfa 	bl	8005b1e <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003334:	f040 80c7 	bne.w	80034c6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2110      	movs	r1, #16
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fcc8 	bl	8004ce8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335c:	e056      	b.n	800340c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336a:	461a      	mov	r2, r3
 800336c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003370:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	440a      	add	r2, r1
 8003388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800338c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003390:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d6:	0151      	lsls	r1, r2, #5
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	440a      	add	r2, r1
 80033dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f6:	0151      	lsls	r1, r2, #5
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	440a      	add	r2, r1
 80033fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003404:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	3301      	adds	r3, #1
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003412:	429a      	cmp	r2, r3
 8003414:	d3a3      	bcc.n	800335e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003424:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003428:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003442:	f043 030b 	orr.w	r3, r3, #11
 8003446:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003458:	f043 030b 	orr.w	r3, r3, #11
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	e015      	b.n	800348c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003472:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003476:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003486:	f043 030b 	orr.w	r3, r3, #11
 800348a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800349e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b0:	461a      	mov	r2, r3
 80034b2:	f002 fbf9 	bl	8005ca8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fb27 	bl	8005b1e <USB_ReadInterrupts>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	d124      	bne.n	8003526 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fbbd 	bl	8005c60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 fc5d 	bl	8004daa <USB_GetDevSpeed>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681c      	ldr	r4, [r3, #0]
 80034fc:	f001 f920 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8003500:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	4620      	mov	r0, r4
 800350c:	f001 f99a 	bl	8004844 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f004 fb14 	bl	8007b3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003524:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 faf7 	bl	8005b1e <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d10a      	bne.n	8003550 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f004 faf1 	bl	8007b22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f002 0208 	and.w	r2, r2, #8
 800354e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f002 fae2 	bl	8005b1e <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003564:	d10f      	bne.n	8003586 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f004 fb53 	bl	8007c1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fac7 	bl	8005b1e <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359a:	d10f      	bne.n	80035bc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f004 fb26 	bl	8007bf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f002 faac 	bl	8005b1e <USB_ReadInterrupts>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d10a      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f004 fb34 	bl	8007c40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 fa96 	bl	8005b1e <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d115      	bne.n	8003628 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 fb24 	bl	8007c5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	e000      	b.n	8003628 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003626:	bf00      	nop
    }
  }
}
 8003628:	3734      	adds	r7, #52	; 0x34
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}

0800362e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_PCD_SetAddress+0x1a>
 8003644:	2302      	movs	r3, #2
 8003646:	e013      	b.n	8003670 <HAL_PCD_SetAddress+0x42>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f002 f9f4 	bl	8005a4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4603      	mov	r3, r0
 8003688:	70fb      	strb	r3, [r7, #3]
 800368a:	460b      	mov	r3, r1
 800368c:	803b      	strh	r3, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da0f      	bge.n	80036be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 020f 	and.w	r2, r3, #15
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3338      	adds	r3, #56	; 0x38
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	705a      	strb	r2, [r3, #1]
 80036bc:	e00f      	b.n	80036de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	3304      	adds	r3, #4
 80036d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ea:	883a      	ldrh	r2, [r7, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	78ba      	ldrb	r2, [r7, #2]
 80036f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003708:	78bb      	ldrb	r3, [r7, #2]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d102      	bne.n	8003714 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_PCD_EP_Open+0xaa>
 800371e:	2302      	movs	r3, #2
 8003720:	e00e      	b.n	8003740 <HAL_PCD_EP_Open+0xc8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fb5f 	bl	8004df4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800373e:	7afb      	ldrb	r3, [r7, #11]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	da0f      	bge.n	800377c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 020f 	and.w	r2, r3, #15
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	3338      	adds	r3, #56	; 0x38
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	705a      	strb	r2, [r3, #1]
 800377a:	e00f      	b.n	800379c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 020f 	and.w	r2, r3, #15
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_PCD_EP_Close+0x6e>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e00e      	b.n	80037d4 <HAL_PCD_EP_Close+0x8c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fb9d 	bl	8004f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	460b      	mov	r3, r1
 80037ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ec:	7afb      	ldrb	r3, [r7, #11]
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800381e:	7afb      	ldrb	r3, [r7, #11]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	b2da      	uxtb	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	f001 fe78 	bl	8005544 <USB_EP0StartXfer>
 8003854:	e008      	b.n	8003868 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6979      	ldr	r1, [r7, #20]
 8003864:	f001 fc2a 	bl	80050bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003894:	681b      	ldr	r3, [r3, #0]
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	460b      	mov	r3, r1
 80038b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	7afb      	ldrb	r3, [r7, #11]
 80038b4:	f003 020f 	and.w	r2, r3, #15
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3338      	adds	r3, #56	; 0x38
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2201      	movs	r2, #1
 80038e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038fc:	7afb      	ldrb	r3, [r7, #11]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	f001 fe16 	bl	8005544 <USB_EP0StartXfer>
 8003918:	e008      	b.n	800392c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	6979      	ldr	r1, [r7, #20]
 8003928:	f001 fbc8 	bl	80050bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 020f 	and.w	r2, r3, #15
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d901      	bls.n	8003954 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e050      	b.n	80039f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da0f      	bge.n	800397c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	705a      	strb	r2, [r3, #1]
 800397a:	e00d      	b.n	8003998 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_PCD_EP_SetStall+0x82>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e01e      	b.n	80039f6 <HAL_PCD_EP_SetStall+0xc0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 ff6d 	bl	80058a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	b2d9      	uxtb	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039e6:	461a      	mov	r2, r3
 80039e8:	f002 f95e 	bl	8005ca8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d901      	bls.n	8003a1c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e042      	b.n	8003aa2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da0f      	bge.n	8003a44 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3338      	adds	r3, #56	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	705a      	strb	r2, [r3, #1]
 8003a42:	e00f      	b.n	8003a64 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	f003 020f 	and.w	r2, r3, #15
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_EP_ClrStall+0x86>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e00e      	b.n	8003aa2 <HAL_PCD_EP_ClrStall+0xa4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 ff75 	bl	8005982 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	; 0x28
 8003aae:	af02      	add	r7, sp, #8
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3338      	adds	r3, #56	; 0x38
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d901      	bls.n	8003ae2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e06c      	b.n	8003bbc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d902      	bls.n	8003afe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3303      	adds	r3, #3
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b06:	e02b      	b.n	8003b60 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d902      	bls.n	8003b24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3303      	adds	r3, #3
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68d9      	ldr	r1, [r3, #12]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4603      	mov	r3, r0
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f001 fe51 	bl	80057ea <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d809      	bhi.n	8003b8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d203      	bcs.n	8003b8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1be      	bne.n	8003b08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d811      	bhi.n	8003bba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	6939      	ldr	r1, [r7, #16]
 8003bb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	333c      	adds	r3, #60	; 0x3c
 8003bdc:	3304      	adds	r3, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	f040 80a0 	bne.w	8003d3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d015      	beq.n	8003c32 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f240 80dd 	bls.w	8003dca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80d7 	beq.w	8003dca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	6093      	str	r3, [r2, #8]
 8003c30:	e0cb      	b.n	8003dca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	6093      	str	r3, [r2, #8]
 8003c4e:	e0bc      	b.n	8003dca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 80b7 	bne.w	8003dca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a5d      	ldr	r2, [pc, #372]	; (8003dd4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d90f      	bls.n	8003c84 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c80:	6093      	str	r3, [r2, #8]
 8003c82:	e0a2      	b.n	8003dca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c96:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	0159      	lsls	r1, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003caa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4403      	add	r3, r0
 8003cba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cbe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4403      	add	r3, r0
 8003ce2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4419      	add	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cfc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d114      	bne.n	8003d2e <PCD_EP_OutXfrComplete_int+0x16a>
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d26:	461a      	mov	r2, r3
 8003d28:	2101      	movs	r1, #1
 8003d2a:	f001 ffbd 	bl	8005ca8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f003 febf 	bl	8007ab8 <HAL_PCD_DataOutStageCallback>
 8003d3a:	e046      	b.n	8003dca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d124      	bne.n	8003d8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d60:	6093      	str	r3, [r2, #8]
 8003d62:	e032      	b.n	8003dca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f003 fe96 	bl	8007ab8 <HAL_PCD_DataOutStageCallback>
 8003d8c:	e01d      	b.n	8003dca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d114      	bne.n	8003dbe <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003db6:	461a      	mov	r2, r3
 8003db8:	2100      	movs	r1, #0
 8003dba:	f001 ff75 	bl	8005ca8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f003 fe77 	bl	8007ab8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	4f54300a 	.word	0x4f54300a
 8003dd8:	4f54310a 	.word	0x4f54310a

08003ddc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	333c      	adds	r3, #60	; 0x3c
 8003df4:	3304      	adds	r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d90e      	bls.n	8003e30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f003 fe2f 	bl	8007a94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d90c      	bls.n	8003e58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e50:	461a      	mov	r2, r3
 8003e52:	2101      	movs	r1, #1
 8003e54:	f001 ff28 	bl	8005ca8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	4f54300a 	.word	0x4f54300a

08003e68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e86:	883b      	ldrh	r3, [r7, #0]
 8003e88:	0419      	lsls	r1, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
 8003e94:	e028      	b.n	8003ee8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e00d      	b.n	8003ec6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	3340      	adds	r3, #64	; 0x40
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3ec      	bcc.n	8003eaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ed0:	883b      	ldrh	r3, [r7, #0]
 8003ed2:	0418      	lsls	r0, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	4302      	orrs	r2, r0
 8003ee0:	3340      	adds	r3, #64	; 0x40
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e25b      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d075      	beq.n	800403a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4e:	4ba3      	ldr	r3, [pc, #652]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5a:	4ba0      	ldr	r3, [pc, #640]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d112      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f66:	4b9d      	ldr	r3, [pc, #628]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	4b99      	ldr	r3, [pc, #612]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05b      	beq.n	8004038 <HAL_RCC_OscConfig+0x108>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d157      	bne.n	8004038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e236      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x74>
 8003f96:	4b91      	ldr	r3, [pc, #580]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a90      	ldr	r2, [pc, #576]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x98>
 8003fae:	4b8b      	ldr	r3, [pc, #556]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a8a      	ldr	r2, [pc, #552]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a87      	ldr	r2, [pc, #540]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	4b84      	ldr	r3, [pc, #528]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a83      	ldr	r2, [pc, #524]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b81      	ldr	r3, [pc, #516]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a80      	ldr	r2, [pc, #512]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fa78 	bl	80014dc <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fa74 	bl	80014dc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1fb      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b76      	ldr	r3, [pc, #472]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd fa64 	bl	80014dc <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fd fa60 	bl	80014dc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1e7      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0xe8>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d063      	beq.n	800410e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004046:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004052:	4b62      	ldr	r3, [pc, #392]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11c      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405e:	4b5f      	ldr	r3, [pc, #380]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1bb      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b56      	ldr	r3, [pc, #344]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4952      	ldr	r1, [pc, #328]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	e03a      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b4f      	ldr	r3, [pc, #316]	; (80041e0 <HAL_RCC_OscConfig+0x2b0>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fa19 	bl	80014dc <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fd fa15 	bl	80014dc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e19c      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b46      	ldr	r3, [pc, #280]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b43      	ldr	r3, [pc, #268]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4940      	ldr	r1, [pc, #256]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_OscConfig+0x2b0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd f9f8 	bl	80014dc <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fd f9f4 	bl	80014dc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e17b      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d030      	beq.n	800417c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_RCC_OscConfig+0x2b4>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fd f9d8 	bl	80014dc <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004130:	f7fd f9d4 	bl	80014dc <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e15b      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x200>
 800414e:	e015      	b.n	800417c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004150:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_RCC_OscConfig+0x2b4>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fd f9c1 	bl	80014dc <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd f9bd 	bl	80014dc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e144      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a0 	beq.w	80042ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6413      	str	r3, [r2, #64]	; 0x40
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_OscConfig+0x2b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d121      	bne.n	800420a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_RCC_OscConfig+0x2b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_RCC_OscConfig+0x2b8>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d2:	f7fd f983 	bl	80014dc <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	e011      	b.n	80041fe <HAL_RCC_OscConfig+0x2ce>
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	42470000 	.word	0x42470000
 80041e4:	42470e80 	.word	0x42470e80
 80041e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fd f976 	bl	80014dc <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0fd      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b81      	ldr	r3, [pc, #516]	; (8004404 <HAL_RCC_OscConfig+0x4d4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x2f0>
 8004212:	4b7d      	ldr	r3, [pc, #500]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a7c      	ldr	r2, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	e01c      	b.n	800425a <HAL_RCC_OscConfig+0x32a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b05      	cmp	r3, #5
 8004226:	d10c      	bne.n	8004242 <HAL_RCC_OscConfig+0x312>
 8004228:	4b77      	ldr	r3, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a76      	ldr	r2, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 800422e:	f043 0304 	orr.w	r3, r3, #4
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	4b74      	ldr	r3, [pc, #464]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a73      	ldr	r2, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	e00b      	b.n	800425a <HAL_RCC_OscConfig+0x32a>
 8004242:	4b71      	ldr	r3, [pc, #452]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a70      	ldr	r2, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b6e      	ldr	r3, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a6d      	ldr	r2, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d015      	beq.n	800428e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004262:	f7fd f93b 	bl	80014dc <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004268:	e00a      	b.n	8004280 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7fd f937 	bl	80014dc <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f241 3288 	movw	r2, #5000	; 0x1388
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e0bc      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004280:	4b61      	ldr	r3, [pc, #388]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ee      	beq.n	800426a <HAL_RCC_OscConfig+0x33a>
 800428c:	e014      	b.n	80042b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428e:	f7fd f925 	bl	80014dc <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fd f921 	bl	80014dc <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0a6      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ee      	bne.n	8004296 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042be:	4b52      	ldr	r3, [pc, #328]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a51      	ldr	r2, [pc, #324]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8092 	beq.w	80043f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d4:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d05c      	beq.n	800439a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d141      	bne.n	800436c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e8:	4b48      	ldr	r3, [pc, #288]	; (800440c <HAL_RCC_OscConfig+0x4dc>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fd f8f5 	bl	80014dc <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd f8f1 	bl	80014dc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e078      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004308:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	3b01      	subs	r3, #1
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	4933      	ldr	r1, [pc, #204]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433e:	4b33      	ldr	r3, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x4dc>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd f8ca 	bl	80014dc <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd f8c6 	bl	80014dc <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e04d      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x41c>
 800436a:	e045      	b.n	80043f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x4dc>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fd f8b3 	bl	80014dc <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fd f8af 	bl	80014dc <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e036      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <HAL_RCC_OscConfig+0x44a>
 8004398:	e02e      	b.n	80043f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e029      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_RCC_OscConfig+0x4d8>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d115      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40007000 	.word	0x40007000
 8004408:	40023800 	.word	0x40023800
 800440c:	42470060 	.word	0x42470060

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0cc      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b68      	ldr	r3, [pc, #416]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d90c      	bls.n	800444c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b8      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800446e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b50      	ldr	r3, [pc, #320]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d044      	beq.n	8004530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b47      	ldr	r3, [pc, #284]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d119      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d003      	beq.n	80044ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e067      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4934      	ldr	r1, [pc, #208]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004500:	f7fc ffec 	bl	80014dc <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fc ffe8 	bl	80014dc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e04f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 020c 	and.w	r2, r3, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	429a      	cmp	r2, r3
 800452e:	d1eb      	bne.n	8004508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d20c      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e032      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004596:	f000 f821 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800459a:	4601      	mov	r1, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	fa21 f303 	lsr.w	r3, r1, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fc ff4c 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00
 80045cc:	40023800 	.word	0x40023800
 80045d0:	080088f0 	.word	0x080088f0
 80045d4:	20000000 	.word	0x20000000
 80045d8:	20000004 	.word	0x20000004

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f2:	4b50      	ldr	r3, [pc, #320]	; (8004734 <HAL_RCC_GetSysClockFreq+0x158>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d007      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0x32>
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d008      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x38>
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 808d 	bne.w	8004722 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <HAL_RCC_GetSysClockFreq+0x15c>)
 800460a:	60bb      	str	r3, [r7, #8]
       break;
 800460c:	e08c      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800460e:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCC_GetSysClockFreq+0x160>)
 8004610:	60bb      	str	r3, [r7, #8]
      break;
 8004612:	e089      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_GetSysClockFreq+0x158>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800461e:	4b45      	ldr	r3, [pc, #276]	; (8004734 <HAL_RCC_GetSysClockFreq+0x158>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d023      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_RCC_GetSysClockFreq+0x158>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	ea03 0501 	and.w	r5, r3, r1
 8004640:	ea04 0602 	and.w	r6, r4, r2
 8004644:	4a3d      	ldr	r2, [pc, #244]	; (800473c <HAL_RCC_GetSysClockFreq+0x160>)
 8004646:	fb02 f106 	mul.w	r1, r2, r6
 800464a:	2200      	movs	r2, #0
 800464c:	fb02 f205 	mul.w	r2, r2, r5
 8004650:	440a      	add	r2, r1
 8004652:	493a      	ldr	r1, [pc, #232]	; (800473c <HAL_RCC_GetSysClockFreq+0x160>)
 8004654:	fba5 0101 	umull	r0, r1, r5, r1
 8004658:	1853      	adds	r3, r2, r1
 800465a:	4619      	mov	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f04f 0400 	mov.w	r4, #0
 8004662:	461a      	mov	r2, r3
 8004664:	4623      	mov	r3, r4
 8004666:	f7fc fa29 	bl	8000abc <__aeabi_uldivmod>
 800466a:	4603      	mov	r3, r0
 800466c:	460c      	mov	r4, r1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e049      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_RCC_GetSysClockFreq+0x158>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	ea03 0501 	and.w	r5, r3, r1
 8004688:	ea04 0602 	and.w	r6, r4, r2
 800468c:	4629      	mov	r1, r5
 800468e:	4632      	mov	r2, r6
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f04f 0400 	mov.w	r4, #0
 8004698:	0154      	lsls	r4, r2, #5
 800469a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800469e:	014b      	lsls	r3, r1, #5
 80046a0:	4619      	mov	r1, r3
 80046a2:	4622      	mov	r2, r4
 80046a4:	1b49      	subs	r1, r1, r5
 80046a6:	eb62 0206 	sbc.w	r2, r2, r6
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	0194      	lsls	r4, r2, #6
 80046b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046b8:	018b      	lsls	r3, r1, #6
 80046ba:	1a5b      	subs	r3, r3, r1
 80046bc:	eb64 0402 	sbc.w	r4, r4, r2
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	00e2      	lsls	r2, r4, #3
 80046ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ce:	00d9      	lsls	r1, r3, #3
 80046d0:	460b      	mov	r3, r1
 80046d2:	4614      	mov	r4, r2
 80046d4:	195b      	adds	r3, r3, r5
 80046d6:	eb44 0406 	adc.w	r4, r4, r6
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	02a2      	lsls	r2, r4, #10
 80046e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046e8:	0299      	lsls	r1, r3, #10
 80046ea:	460b      	mov	r3, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	4621      	mov	r1, r4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4623      	mov	r3, r4
 80046fc:	f7fc f9de 	bl	8000abc <__aeabi_uldivmod>
 8004700:	4603      	mov	r3, r0
 8004702:	460c      	mov	r4, r1
 8004704:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_GetSysClockFreq+0x158>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	0c1b      	lsrs	r3, r3, #16
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	3301      	adds	r3, #1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	60bb      	str	r3, [r7, #8]
      break;
 8004720:	e002      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004724:	60bb      	str	r3, [r7, #8]
      break;
 8004726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004728:	68bb      	ldr	r3, [r7, #8]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
 8004738:	00f42400 	.word	0x00f42400
 800473c:	00b71b00 	.word	0x00b71b00

08004740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCC_GetHCLKFreq+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000000 	.word	0x20000000

08004758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800475c:	f7ff fff0 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004760:	4601      	mov	r1, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0a9b      	lsrs	r3, r3, #10
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4a03      	ldr	r2, [pc, #12]	; (800477c <HAL_RCC_GetPCLK1Freq+0x24>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	08008900 	.word	0x08008900

08004780 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004780:	b084      	sub	sp, #16
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	f107 001c 	add.w	r0, r7, #28
 800478e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2b01      	cmp	r3, #1
 8004796:	d122      	bne.n	80047de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f001 fac6 	bl	8005d64 <USB_CoreReset>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]
 80047dc:	e01a      	b.n	8004814 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 faba 	bl	8005d64 <USB_CoreReset>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
 8004806:	e005      	b.n	8004814 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	2b01      	cmp	r3, #1
 8004818:	d10b      	bne.n	8004832 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f043 0206 	orr.w	r2, r3, #6
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483e:	b004      	add	sp, #16
 8004840:	4770      	bx	lr
	...

08004844 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d165      	bne.n	8004924 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a41      	ldr	r2, [pc, #260]	; (8004960 <USB_SetTurnaroundTime+0x11c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d906      	bls.n	800486e <USB_SetTurnaroundTime+0x2a>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4a40      	ldr	r2, [pc, #256]	; (8004964 <USB_SetTurnaroundTime+0x120>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d802      	bhi.n	800486e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004868:	230f      	movs	r3, #15
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	e062      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a3c      	ldr	r2, [pc, #240]	; (8004964 <USB_SetTurnaroundTime+0x120>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d906      	bls.n	8004884 <USB_SetTurnaroundTime+0x40>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4a3b      	ldr	r2, [pc, #236]	; (8004968 <USB_SetTurnaroundTime+0x124>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d802      	bhi.n	8004884 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800487e:	230e      	movs	r3, #14
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e057      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a38      	ldr	r2, [pc, #224]	; (8004968 <USB_SetTurnaroundTime+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d906      	bls.n	800489a <USB_SetTurnaroundTime+0x56>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4a37      	ldr	r2, [pc, #220]	; (800496c <USB_SetTurnaroundTime+0x128>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d802      	bhi.n	800489a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004894:	230d      	movs	r3, #13
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e04c      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a33      	ldr	r2, [pc, #204]	; (800496c <USB_SetTurnaroundTime+0x128>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d906      	bls.n	80048b0 <USB_SetTurnaroundTime+0x6c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4a32      	ldr	r2, [pc, #200]	; (8004970 <USB_SetTurnaroundTime+0x12c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d802      	bhi.n	80048b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048aa:	230c      	movs	r3, #12
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e041      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a2f      	ldr	r2, [pc, #188]	; (8004970 <USB_SetTurnaroundTime+0x12c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d906      	bls.n	80048c6 <USB_SetTurnaroundTime+0x82>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a2e      	ldr	r2, [pc, #184]	; (8004974 <USB_SetTurnaroundTime+0x130>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d802      	bhi.n	80048c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048c0:	230b      	movs	r3, #11
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e036      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <USB_SetTurnaroundTime+0x130>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d906      	bls.n	80048dc <USB_SetTurnaroundTime+0x98>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a29      	ldr	r2, [pc, #164]	; (8004978 <USB_SetTurnaroundTime+0x134>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d802      	bhi.n	80048dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048d6:	230a      	movs	r3, #10
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e02b      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a26      	ldr	r2, [pc, #152]	; (8004978 <USB_SetTurnaroundTime+0x134>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d906      	bls.n	80048f2 <USB_SetTurnaroundTime+0xae>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <USB_SetTurnaroundTime+0x138>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d802      	bhi.n	80048f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048ec:	2309      	movs	r3, #9
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e020      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <USB_SetTurnaroundTime+0x138>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d906      	bls.n	8004908 <USB_SetTurnaroundTime+0xc4>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <USB_SetTurnaroundTime+0x13c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004902:	2308      	movs	r3, #8
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e015      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <USB_SetTurnaroundTime+0x13c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d906      	bls.n	800491e <USB_SetTurnaroundTime+0xda>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <USB_SetTurnaroundTime+0x140>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d802      	bhi.n	800491e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004918:	2307      	movs	r3, #7
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e00a      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800491e:	2306      	movs	r3, #6
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e007      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800492a:	2309      	movs	r3, #9
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e001      	b.n	8004934 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004930:	2309      	movs	r3, #9
 8004932:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	00d8acbf 	.word	0x00d8acbf
 8004964:	00e4e1bf 	.word	0x00e4e1bf
 8004968:	00f423ff 	.word	0x00f423ff
 800496c:	0106737f 	.word	0x0106737f
 8004970:	011a499f 	.word	0x011a499f
 8004974:	01312cff 	.word	0x01312cff
 8004978:	014ca43f 	.word	0x014ca43f
 800497c:	016e35ff 	.word	0x016e35ff
 8004980:	01a6ab1f 	.word	0x01a6ab1f
 8004984:	01e847ff 	.word	0x01e847ff

08004988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f043 0201 	orr.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0201 	bic.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	e00b      	b.n	8004a10 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	e001      	b.n	8004a10 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e003      	b.n	8004a18 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a10:	2032      	movs	r0, #50	; 0x32
 8004a12:	f7fc fd6f 	bl	80014f4 <HAL_Delay>

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a20:	b084      	sub	sp, #16
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	e009      	b.n	8004a54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	3340      	adds	r3, #64	; 0x40
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3301      	adds	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0e      	cmp	r3, #14
 8004a58:	d9f2      	bls.n	8004a40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d11c      	bne.n	8004a9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
 8004a98:	e00b      	b.n	8004ab2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	461a      	mov	r2, r3
 8004ace:	680b      	ldr	r3, [r1, #0]
 8004ad0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10c      	bne.n	8004af2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f949 	bl	8004d78 <USB_SetDevSpeed>
 8004ae6:	e008      	b.n	8004afa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f944 	bl	8004d78 <USB_SetDevSpeed>
 8004af0:	e003      	b.n	8004afa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004af2:	2103      	movs	r1, #3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f93f 	bl	8004d78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004afa:	2110      	movs	r1, #16
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8f3 	bl	8004ce8 <USB_FlushTxFifo>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f911 	bl	8004d34 <USB_FlushRxFifo>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	461a      	mov	r2, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e043      	b.n	8004bce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b5c:	d118      	bne.n	8004b90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b70:	461a      	mov	r2, r3
 8004b72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e013      	b.n	8004ba2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	461a      	mov	r2, r3
 8004b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e008      	b.n	8004ba2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d3b7      	bcc.n	8004b46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	e043      	b.n	8004c64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf2:	d118      	bne.n	8004c26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	461a      	mov	r2, r3
 8004c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e013      	b.n	8004c38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e008      	b.n	8004c38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	461a      	mov	r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	461a      	mov	r2, r3
 8004c46:	2300      	movs	r3, #0
 8004c48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	461a      	mov	r2, r3
 8004c58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3301      	adds	r3, #1
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d3b7      	bcc.n	8004bdc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f043 0210 	orr.w	r2, r3, #16
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <USB_DevInit+0x2c4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d107      	bne.n	8004cd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce0:	b004      	add	sp, #16
 8004ce2:	4770      	bx	lr
 8004ce4:	803c3800 	.word	0x803c3800

08004ce8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <USB_FlushTxFifo+0x48>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e006      	b.n	8004d22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d0f0      	beq.n	8004d02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	00030d40 	.word	0x00030d40

08004d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2210      	movs	r2, #16
 8004d44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <USB_FlushRxFifo+0x40>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e006      	b.n	8004d66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d0f0      	beq.n	8004d46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	00030d40 	.word	0x00030d40

08004d78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0306 	and.w	r3, r3, #6
 8004dc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]
 8004dce:	e00a      	b.n	8004de6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d002      	beq.n	8004ddc <USB_GetDevSpeed+0x32>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d102      	bne.n	8004de2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	75fb      	strb	r3, [r7, #23]
 8004de0:	e001      	b.n	8004de6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004de2:	230f      	movs	r3, #15
 8004de4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d13a      	bne.n	8004e86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	2101      	movs	r1, #1
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d155      	bne.n	8004ef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	78db      	ldrb	r3, [r3, #3]
 8004e62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	059b      	lsls	r3, r3, #22
 8004e6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	e036      	b.n	8004ef4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	2101      	movs	r1, #1
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d11a      	bne.n	8004ef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eda:	430b      	orrs	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d161      	bne.n	8004fe4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f36:	d11f      	bne.n	8004f78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	2101      	movs	r1, #1
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f98:	4013      	ands	r3, r2
 8004f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	0159      	lsls	r1, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <USB_DeactivateEndpoint+0x1b0>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]
 8004fe2:	e060      	b.n	80050a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffa:	d11f      	bne.n	800503c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800501a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800503a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	2101      	movs	r1, #1
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	43db      	mvns	r3, r3
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800505c:	4013      	ands	r3, r2
 800505e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	2101      	movs	r1, #1
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	43db      	mvns	r3, r3
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005080:	4013      	ands	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	0159      	lsls	r1, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	440b      	add	r3, r1
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	4619      	mov	r1, r3
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <USB_DeactivateEndpoint+0x1b4>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	ec337800 	.word	0xec337800
 80050b8:	eff37800 	.word	0xeff37800

080050bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	f040 815c 	bne.w	8005396 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d132      	bne.n	800514c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005144:	0cdb      	lsrs	r3, r3, #19
 8005146:	04db      	lsls	r3, r3, #19
 8005148:	6113      	str	r3, [r2, #16]
 800514a:	e074      	b.n	8005236 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	0cdb      	lsrs	r3, r3, #19
 8005168:	04db      	lsls	r3, r3, #19
 800516a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800518a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800518e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6959      	ldr	r1, [r3, #20]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	440b      	add	r3, r1
 80051a8:	1e59      	subs	r1, r3, #1
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b2:	04d9      	lsls	r1, r3, #19
 80051b4:	4b9d      	ldr	r3, [pc, #628]	; (800542c <USB_EPStartXfer+0x370>)
 80051b6:	400b      	ands	r3, r1
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	0148      	lsls	r0, r1, #5
 80051bc:	69f9      	ldr	r1, [r7, #28]
 80051be:	4401      	add	r1, r0
 80051c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051c4:	4313      	orrs	r3, r2
 80051c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	69b9      	ldr	r1, [r7, #24]
 80051e0:	0148      	lsls	r0, r1, #5
 80051e2:	69f9      	ldr	r1, [r7, #28]
 80051e4:	4401      	add	r1, r0
 80051e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051ea:	4313      	orrs	r3, r2
 80051ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d11f      	bne.n	8005236 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005214:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005234:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d14b      	bne.n	80052d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d009      	beq.n	8005258 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d128      	bne.n	80052b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d110      	bne.n	8005292 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e00f      	b.n	80052b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e12f      	b.n	8005534 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	78db      	ldrb	r3, [r3, #3]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d015      	beq.n	8005328 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8117 	beq.w	8005534 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	2101      	movs	r1, #1
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	69f9      	ldr	r1, [r7, #28]
 800531e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005322:	4313      	orrs	r3, r2
 8005324:	634b      	str	r3, [r1, #52]	; 0x34
 8005326:	e105      	b.n	8005534 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d110      	bne.n	800535a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e00f      	b.n	800537a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	68d9      	ldr	r1, [r3, #12]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	b298      	uxth	r0, r3
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4603      	mov	r3, r0
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fa2b 	bl	80057ea <USB_WritePacket>
 8005394:	e0ce      	b.n	8005534 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b0:	0cdb      	lsrs	r3, r3, #19
 80053b2:	04db      	lsls	r3, r3, #19
 80053b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d126      	bne.n	8005430 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	0148      	lsls	r0, r1, #5
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	4401      	add	r1, r0
 8005400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005404:	4313      	orrs	r3, r2
 8005406:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005426:	6113      	str	r3, [r2, #16]
 8005428:	e036      	b.n	8005498 <USB_EPStartXfer+0x3dc>
 800542a:	bf00      	nop
 800542c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4413      	add	r3, r2
 800543a:	1e5a      	subs	r2, r3, #1
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	8afb      	ldrh	r3, [r7, #22]
 8005456:	04d9      	lsls	r1, r3, #19
 8005458:	4b39      	ldr	r3, [pc, #228]	; (8005540 <USB_EPStartXfer+0x484>)
 800545a:	400b      	ands	r3, r1
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	0148      	lsls	r0, r1, #5
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	4401      	add	r1, r0
 8005464:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	8af9      	ldrh	r1, [r7, #22]
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	0148      	lsls	r0, r1, #5
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	4401      	add	r1, r0
 8005490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10d      	bne.n	80054ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	68d9      	ldr	r1, [r3, #12]
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	460a      	mov	r2, r1
 80054b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d128      	bne.n	8005514 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d110      	bne.n	80054f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e00f      	b.n	8005514 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005512:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	1ff80000 	.word	0x1ff80000

08005544 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b01      	cmp	r3, #1
 8005562:	f040 80cd 	bne.w	8005700 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d132      	bne.n	80055d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800558c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055cc:	0cdb      	lsrs	r3, r3, #19
 80055ce:	04db      	lsls	r3, r3, #19
 80055d0:	6113      	str	r3, [r2, #16]
 80055d2:	e04e      	b.n	8005672 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	0cdb      	lsrs	r3, r3, #19
 80055f0:	04db      	lsls	r3, r3, #19
 80055f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005612:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005616:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	d903      	bls.n	800562c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800564a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005662:	6939      	ldr	r1, [r7, #16]
 8005664:	0148      	lsls	r0, r1, #5
 8005666:	6979      	ldr	r1, [r7, #20]
 8005668:	4401      	add	r1, r0
 800566a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d11e      	bne.n	80056b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	e092      	b.n	80057dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d07e      	beq.n	80057dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	2101      	movs	r1, #1
 80056f0:	fa01 f303 	lsl.w	r3, r1, r3
 80056f4:	6979      	ldr	r1, [r7, #20]
 80056f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fa:	4313      	orrs	r3, r2
 80056fc:	634b      	str	r3, [r1, #52]	; 0x34
 80056fe:	e06d      	b.n	80057dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571a:	0cdb      	lsrs	r3, r3, #19
 800571c:	04db      	lsls	r3, r3, #19
 800571e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800573e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005742:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800578a:	6939      	ldr	r1, [r7, #16]
 800578c:	0148      	lsls	r0, r1, #5
 800578e:	6979      	ldr	r1, [r7, #20]
 8005790:	4401      	add	r1, r0
 8005792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005796:	4313      	orrs	r3, r2
 8005798:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10d      	bne.n	80057bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68d9      	ldr	r1, [r3, #12]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	460a      	mov	r2, r1
 80057ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b089      	sub	sp, #36	; 0x24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	4611      	mov	r1, r2
 80057f6:	461a      	mov	r2, r3
 80057f8:	460b      	mov	r3, r1
 80057fa:	71fb      	strb	r3, [r7, #7]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005808:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11a      	bne.n	8005846 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005810:	88bb      	ldrh	r3, [r7, #4]
 8005812:	3303      	adds	r3, #3
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	e00f      	b.n	800583e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	031a      	lsls	r2, r3, #12
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582a:	461a      	mov	r2, r3
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3304      	adds	r3, #4
 8005836:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	3301      	adds	r3, #1
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3eb      	bcc.n	800581e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3724      	adds	r7, #36	; 0x24
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005854:	b480      	push	{r7}
 8005856:	b089      	sub	sp, #36	; 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	3303      	adds	r3, #3
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e00b      	b.n	8005890 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	601a      	str	r2, [r3, #0]
    pDest++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3304      	adds	r3, #4
 8005888:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3301      	adds	r3, #1
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	429a      	cmp	r2, r3
 8005896:	d3ef      	bcc.n	8005878 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005898:	69fb      	ldr	r3, [r7, #28]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d12c      	bne.n	800591c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	db12      	blt.n	80058fa <USB_EPSetStall+0x54>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00f      	beq.n	80058fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e02b      	b.n	8005974 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	db12      	blt.n	8005954 <USB_EPSetStall+0xae>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00f      	beq.n	8005954 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005952:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d128      	bne.n	80059f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d003      	beq.n	80059ce <USB_EPClearStall+0x4c>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	78db      	ldrb	r3, [r3, #3]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d138      	bne.n	8005a40 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e027      	b.n	8005a40 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d003      	beq.n	8005a20 <USB_EPClearStall+0x9e>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	78db      	ldrb	r3, [r3, #3]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d10f      	bne.n	8005a40 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	460b      	mov	r3, r1
 8005a58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ab4:	f023 0303 	bic.w	r3, r3, #3
 8005ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac8:	f023 0302 	bic.w	r3, r3, #2
 8005acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4013      	ands	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	0c1b      	lsrs	r3, r3, #16
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	b29b      	uxth	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bda:	68bb      	ldr	r3, [r7, #8]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	01db      	lsls	r3, r3, #7
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4013      	ands	r3, r2
 8005c34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c36:	68bb      	ldr	r3, [r7, #8]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0301 	and.w	r3, r3, #1
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c7e:	f023 0307 	bic.w	r3, r3, #7
 8005c82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	333c      	adds	r3, #60	; 0x3c
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <USB_EP0_OutStart+0xb8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d90a      	bls.n	8005ce2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cdc:	d101      	bne.n	8005ce2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e037      	b.n	8005d52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d10:	f043 0318 	orr.w	r3, r3, #24
 8005d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10f      	bne.n	8005d50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	461a      	mov	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	4f54300a 	.word	0x4f54300a

08005d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <USB_CoreReset+0x64>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e01b      	b.n	8005dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	daf2      	bge.n	8005d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <USB_CoreReset+0x64>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e006      	b.n	8005dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d0f0      	beq.n	8005d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	00030d40 	.word	0x00030d40

08005dcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ddc:	f002 f92c 	bl	8008038 <malloc>
 8005de0:	4603      	mov	r3, r0
 8005de2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d105      	bne.n	8005df6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005df2:	2302      	movs	r3, #2
 8005df4:	e066      	b.n	8005ec4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7c1b      	ldrb	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d119      	bne.n	8005e3a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	2181      	movs	r1, #129	; 0x81
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 ff99 	bl	8007d46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e1e:	2202      	movs	r2, #2
 8005e20:	2101      	movs	r1, #1
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 ff8f 	bl	8007d46 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2210      	movs	r2, #16
 8005e34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e38:	e016      	b.n	8005e68 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e3a:	2340      	movs	r3, #64	; 0x40
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	2181      	movs	r1, #129	; 0x81
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ff80 	bl	8007d46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	2202      	movs	r2, #2
 8005e50:	2101      	movs	r1, #1
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 ff77 	bl	8007d46 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2210      	movs	r2, #16
 8005e64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e68:	2308      	movs	r3, #8
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	2182      	movs	r1, #130	; 0x82
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 ff69 	bl	8007d46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	7c1b      	ldrb	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 f83a 	bl	8007f24 <USBD_LL_PrepareReceive>
 8005eb0:	e007      	b.n	8005ec2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eb8:	2340      	movs	r3, #64	; 0x40
 8005eba:	2101      	movs	r1, #1
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 f831 	bl	8007f24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005edc:	2181      	movs	r1, #129	; 0x81
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 ff57 	bl	8007d92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005eea:	2101      	movs	r1, #1
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 ff50 	bl	8007d92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005efa:	2182      	movs	r1, #130	; 0x82
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 ff48 	bl	8007d92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f002 f88b 	bl	8008048 <free>
    pdev->pClassData = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d03a      	beq.n	8005fe4 <USBD_CDC_Setup+0xa0>
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	f040 8097 	bne.w	80060a2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	88db      	ldrh	r3, [r3, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d029      	beq.n	8005fd0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da11      	bge.n	8005faa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005f92:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	88d2      	ldrh	r2, [r2, #6]
 8005f98:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	88db      	ldrh	r3, [r3, #6]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fa9d 	bl	80074e2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005fa8:	e082      	b.n	80060b0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	785a      	ldrb	r2, [r3, #1]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	88db      	ldrh	r3, [r3, #6]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005fc0:	6939      	ldr	r1, [r7, #16]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	88db      	ldrh	r3, [r3, #6]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 fab6 	bl	800753a <USBD_CtlPrepareRx>
    break;
 8005fce:	e06f      	b.n	80060b0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	7850      	ldrb	r0, [r2, #1]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	4798      	blx	r3
    break;
 8005fe2:	e065      	b.n	80060b0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b0b      	cmp	r3, #11
 8005fea:	d84f      	bhi.n	800608c <USBD_CDC_Setup+0x148>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <USBD_CDC_Setup+0xb0>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006025 	.word	0x08006025
 8005ff8:	0800609b 	.word	0x0800609b
 8005ffc:	0800608d 	.word	0x0800608d
 8006000:	0800608d 	.word	0x0800608d
 8006004:	0800608d 	.word	0x0800608d
 8006008:	0800608d 	.word	0x0800608d
 800600c:	0800608d 	.word	0x0800608d
 8006010:	0800608d 	.word	0x0800608d
 8006014:	0800608d 	.word	0x0800608d
 8006018:	0800608d 	.word	0x0800608d
 800601c:	0800604d 	.word	0x0800604d
 8006020:	08006075 	.word	0x08006075
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602a:	2b03      	cmp	r3, #3
 800602c:	d107      	bne.n	800603e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800602e:	f107 030c 	add.w	r3, r7, #12
 8006032:	2202      	movs	r2, #2
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fa53 	bl	80074e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800603c:	e030      	b.n	80060a0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f9dd 	bl	8007400 <USBD_CtlError>
        ret = USBD_FAIL;
 8006046:	2303      	movs	r3, #3
 8006048:	75fb      	strb	r3, [r7, #23]
      break;
 800604a:	e029      	b.n	80060a0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006056:	f107 030f 	add.w	r3, r7, #15
 800605a:	2201      	movs	r2, #1
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fa3f 	bl	80074e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006064:	e01c      	b.n	80060a0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 f9c9 	bl	8007400 <USBD_CtlError>
        ret = USBD_FAIL;
 800606e:	2303      	movs	r3, #3
 8006070:	75fb      	strb	r3, [r7, #23]
      break;
 8006072:	e015      	b.n	80060a0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607a:	2b03      	cmp	r3, #3
 800607c:	d00f      	beq.n	800609e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f9bd 	bl	8007400 <USBD_CtlError>
        ret = USBD_FAIL;
 8006086:	2303      	movs	r3, #3
 8006088:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800608a:	e008      	b.n	800609e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 f9b6 	bl	8007400 <USBD_CtlError>
      ret = USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	75fb      	strb	r3, [r7, #23]
      break;
 8006098:	e002      	b.n	80060a0 <USBD_CDC_Setup+0x15c>
      break;
 800609a:	bf00      	nop
 800609c:	e008      	b.n	80060b0 <USBD_CDC_Setup+0x16c>
      break;
 800609e:	bf00      	nop
    }
    break;
 80060a0:	e006      	b.n	80060b0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f9ab 	bl	8007400 <USBD_CtlError>
    ret = USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	75fb      	strb	r3, [r7, #23]
    break;
 80060ae:	bf00      	nop
  }

  return (uint8_t)ret;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	e049      	b.n	8006172 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060e6:	78fa      	ldrb	r2, [r7, #3]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3318      	adds	r3, #24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d029      	beq.n	8006150 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	3318      	adds	r3, #24
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	78f9      	ldrb	r1, [r7, #3]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	460b      	mov	r3, r1
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	1a5b      	subs	r3, r3, r1
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4403      	add	r3, r0
 800611c:	3344      	adds	r3, #68	; 0x44
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	fbb2 f1f3 	udiv	r1, r2, r3
 8006124:	fb03 f301 	mul.w	r3, r3, r1
 8006128:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800612a:	2b00      	cmp	r3, #0
 800612c:	d110      	bne.n	8006150 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3318      	adds	r3, #24
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006142:	78f9      	ldrb	r1, [r7, #3]
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 feca 	bl	8007ee2 <USBD_LL_Transmit>
 800614e:	e00f      	b.n	8006170 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800618c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006198:	2303      	movs	r3, #3
 800619a:	e015      	b.n	80061c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fee0 	bl	8007f66 <USBD_LL_GetRxDataSize>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061c2:	4611      	mov	r1, r2
 80061c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061de:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d015      	beq.n	8006216 <USBD_CDC_EP0_RxReady+0x46>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061f0:	2bff      	cmp	r3, #255	; 0xff
 80061f2:	d010      	beq.n	8006216 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006202:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800620a:	b292      	uxth	r2, r2
 800620c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2243      	movs	r2, #67	; 0x43
 800622c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800622e:	4b03      	ldr	r3, [pc, #12]	; (800623c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000094 	.word	0x20000094

08006240 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2243      	movs	r2, #67	; 0x43
 800624c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800624e:	4b03      	ldr	r3, [pc, #12]	; (800625c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20000050 	.word	0x20000050

08006260 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2243      	movs	r2, #67	; 0x43
 800626c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800626e:	4b03      	ldr	r3, [pc, #12]	; (800627c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	200000d8 	.word	0x200000d8

08006280 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	220a      	movs	r2, #10
 800628c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800628e:	4b03      	ldr	r3, [pc, #12]	; (800629c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	2000000c 	.word	0x2000000c

080062a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e004      	b.n	80062be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006332:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e01a      	b.n	800637c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800634c:	2b00      	cmp	r3, #0
 800634e:	d114      	bne.n	800637a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2201      	movs	r2, #1
 8006354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800636e:	2181      	movs	r1, #129	; 0x81
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fdb6 	bl	8007ee2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800639e:	2303      	movs	r3, #3
 80063a0:	e016      	b.n	80063d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7c1b      	ldrb	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b4:	2101      	movs	r1, #1
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fdb4 	bl	8007f24 <USBD_LL_PrepareReceive>
 80063bc:	e007      	b.n	80063ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063c4:	2340      	movs	r3, #64	; 0x40
 80063c6:	2101      	movs	r1, #1
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 fdab 	bl	8007f24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e025      	b.n	800643c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	79fa      	ldrb	r2, [r7, #7]
 800642e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f001 fc21 	bl	8007c78 <USBD_LL_Init>
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]

  return ret;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	e010      	b.n	800647e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f107 020e 	add.w	r2, r7, #14
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
 8006474:	4602      	mov	r2, r0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 fc3e 	bl	8007d10 <USBD_LL_Start>
 8006494:	4603      	mov	r3, r0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	4611      	mov	r1, r2
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
  }

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 ff2c 	bl	800738c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	2b01      	cmp	r3, #1
 8006556:	d00e      	beq.n	8006576 <USBD_LL_SetupStage+0x5a>
 8006558:	2b01      	cmp	r3, #1
 800655a:	d302      	bcc.n	8006562 <USBD_LL_SetupStage+0x46>
 800655c:	2b02      	cmp	r3, #2
 800655e:	d014      	beq.n	800658a <USBD_LL_SetupStage+0x6e>
 8006560:	e01d      	b.n	800659e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa18 	bl	80069a0 <USBD_StdDevReq>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]
      break;
 8006574:	e020      	b.n	80065b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa7c 	bl	8006a7c <USBD_StdItfReq>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
      break;
 8006588:	e016      	b.n	80065b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fab8 	bl	8006b08 <USBD_StdEPReq>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e00c      	b.n	80065b8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 fc0f 	bl	8007dd0 <USBD_LL_StallEP>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]
      break;
 80065b6:	bf00      	nop
  }

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	460b      	mov	r3, r1
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d137      	bne.n	8006646 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d14a      	bne.n	800667e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d913      	bls.n	800661c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	1ad2      	subs	r2, r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4293      	cmp	r3, r2
 800660c:	bf28      	it	cs
 800660e:	4613      	movcs	r3, r2
 8006610:	461a      	mov	r2, r3
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 ffad 	bl	8007574 <USBD_CtlContinueRx>
 800661a:	e030      	b.n	800667e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800662e:	2b03      	cmp	r3, #3
 8006630:	d105      	bne.n	800663e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 ffa9 	bl	8007596 <USBD_CtlSendStatus>
 8006644:	e01b      	b.n	800667e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d013      	beq.n	800667a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006658:	2b03      	cmp	r3, #3
 800665a:	d10e      	bne.n	800667a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	7afa      	ldrb	r2, [r7, #11]
 8006666:	4611      	mov	r1, r2
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	4798      	blx	r3
 800666c:	4603      	mov	r3, r0
 800666e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	e002      	b.n	8006680 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800667a:	2303      	movs	r3, #3
 800667c:	e000      	b.n	8006680 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	460b      	mov	r3, r1
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006696:	7afb      	ldrb	r3, [r7, #11]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d16a      	bne.n	8006772 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3314      	adds	r3, #20
 80066a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d155      	bne.n	8006758 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d914      	bls.n	80066e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 ff22 	bl	8007518 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066d4:	2300      	movs	r3, #0
 80066d6:	2200      	movs	r2, #0
 80066d8:	2100      	movs	r1, #0
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fc22 	bl	8007f24 <USBD_LL_PrepareReceive>
 80066e0:	e03a      	b.n	8006758 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d11c      	bne.n	8006728 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d316      	bcc.n	8006728 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006704:	429a      	cmp	r2, r3
 8006706:	d20f      	bcs.n	8006728 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006708:	2200      	movs	r2, #0
 800670a:	2100      	movs	r1, #0
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 ff03 	bl	8007518 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800671a:	2300      	movs	r3, #0
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f001 fbff 	bl	8007f24 <USBD_LL_PrepareReceive>
 8006726:	e017      	b.n	8006758 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800673a:	2b03      	cmp	r3, #3
 800673c:	d105      	bne.n	800674a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800674a:	2180      	movs	r1, #128	; 0x80
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f001 fb3f 	bl	8007dd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 ff32 	bl	80075bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800675e:	2b01      	cmp	r3, #1
 8006760:	d123      	bne.n	80067aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff fe9b 	bl	800649e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006770:	e01b      	b.n	80067aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d013      	beq.n	80067a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006784:	2b03      	cmp	r3, #3
 8006786:	d10e      	bne.n	80067a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	7afa      	ldrb	r2, [r7, #11]
 8006792:	4611      	mov	r1, r2
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	4798      	blx	r3
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	e002      	b.n	80067ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e000      	b.n	80067ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d009      	beq.n	80067f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6852      	ldr	r2, [r2, #4]
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	4611      	mov	r1, r2
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067f8:	2340      	movs	r3, #64	; 0x40
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 faa1 	bl	8007d46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2240      	movs	r2, #64	; 0x40
 8006810:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	2200      	movs	r2, #0
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fa93 	bl	8007d46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2240      	movs	r2, #64	; 0x40
 800682a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688e:	2b04      	cmp	r3, #4
 8006890:	d105      	bne.n	800689e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d10b      	bne.n	80068d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	4611      	mov	r1, r2
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
  }

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006962:	b480      	push	{r7}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	3301      	adds	r3, #1
 8006978:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006980:	8a3b      	ldrh	r3, [r7, #16]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	b21a      	sxth	r2, r3
 8006986:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800698a:	4313      	orrs	r3, r2
 800698c:	b21b      	sxth	r3, r3
 800698e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006990:	89fb      	ldrh	r3, [r7, #14]
}
 8006992:	4618      	mov	r0, r3
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d004      	beq.n	80069c4 <USBD_StdDevReq+0x24>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d002      	beq.n	80069c4 <USBD_StdDevReq+0x24>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <USBD_StdDevReq+0x38>
 80069c2:	e050      	b.n	8006a66 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]
    break;
 80069d6:	e04b      	b.n	8006a70 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b09      	cmp	r3, #9
 80069de:	d83c      	bhi.n	8006a5a <USBD_StdDevReq+0xba>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <USBD_StdDevReq+0x48>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	08006a51 	.word	0x08006a51
 80069f0:	08006a5b 	.word	0x08006a5b
 80069f4:	08006a47 	.word	0x08006a47
 80069f8:	08006a5b 	.word	0x08006a5b
 80069fc:	08006a1b 	.word	0x08006a1b
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a5b 	.word	0x08006a5b
 8006a08:	08006a33 	.word	0x08006a33
 8006a0c:	08006a25 	.word	0x08006a25
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9ce 	bl	8006db4 <USBD_GetDescriptor>
      break;
 8006a18:	e024      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fb33 	bl	8007088 <USBD_SetAddress>
      break;
 8006a22:	e01f      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fb70 	bl	800710c <USBD_SetConfig>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a30:	e018      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc0d 	bl	8007254 <USBD_GetConfig>
      break;
 8006a3a:	e013      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fc3c 	bl	80072bc <USBD_GetStatus>
      break;
 8006a44:	e00e      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fc6a 	bl	8007322 <USBD_SetFeature>
      break;
 8006a4e:	e009      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fc79 	bl	800734a <USBD_ClrFeature>
      break;
 8006a58:	e004      	b.n	8006a64 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fccf 	bl	8007400 <USBD_CtlError>
      break;
 8006a62:	bf00      	nop
    }
    break;
 8006a64:	e004      	b.n	8006a70 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fcc9 	bl	8007400 <USBD_CtlError>
    break;
 8006a6e:	bf00      	nop
  }

  return ret;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop

08006a7c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d003      	beq.n	8006a9e <USBD_StdItfReq+0x22>
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d001      	beq.n	8006a9e <USBD_StdItfReq+0x22>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d12a      	bne.n	8006af4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d81d      	bhi.n	8006ae6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	889b      	ldrh	r3, [r3, #4]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d813      	bhi.n	8006adc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d110      	bne.n	8006af0 <USBD_StdItfReq+0x74>
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10d      	bne.n	8006af0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fd5e 	bl	8007596 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006ada:	e009      	b.n	8006af0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fc8e 	bl	8007400 <USBD_CtlError>
      break;
 8006ae4:	e004      	b.n	8006af0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc89 	bl	8007400 <USBD_CtlError>
      break;
 8006aee:	e000      	b.n	8006af2 <USBD_StdItfReq+0x76>
      break;
 8006af0:	bf00      	nop
    }
    break;
 8006af2:	e004      	b.n	8006afe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc82 	bl	8007400 <USBD_CtlError>
    break;
 8006afc:	bf00      	nop
  }

  return ret;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	889b      	ldrh	r3, [r3, #4]
 8006b1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d004      	beq.n	8006b32 <USBD_StdEPReq+0x2a>
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d002      	beq.n	8006b32 <USBD_StdEPReq+0x2a>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <USBD_StdEPReq+0x3e>
 8006b30:	e135      	b.n	8006d9e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
    break;
 8006b44:	e130      	b.n	8006da8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d03e      	beq.n	8006bcc <USBD_StdEPReq+0xc4>
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d002      	beq.n	8006b58 <USBD_StdEPReq+0x50>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d077      	beq.n	8006c46 <USBD_StdEPReq+0x13e>
 8006b56:	e11c      	b.n	8006d92 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d002      	beq.n	8006b68 <USBD_StdEPReq+0x60>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d015      	beq.n	8006b92 <USBD_StdEPReq+0x8a>
 8006b66:	e02b      	b.n	8006bc0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00c      	beq.n	8006b88 <USBD_StdEPReq+0x80>
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d009      	beq.n	8006b88 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f929 	bl	8007dd0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f925 	bl	8007dd0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b86:	e020      	b.n	8006bca <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc38 	bl	8007400 <USBD_CtlError>
        break;
 8006b90:	e01b      	b.n	8006bca <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10e      	bne.n	8006bb8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <USBD_StdEPReq+0xb0>
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d008      	beq.n	8006bb8 <USBD_StdEPReq+0xb0>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f90c 	bl	8007dd0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fcec 	bl	8007596 <USBD_CtlSendStatus>

        break;
 8006bbe:	e004      	b.n	8006bca <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fc1c 	bl	8007400 <USBD_CtlError>
        break;
 8006bc8:	bf00      	nop
      }
      break;
 8006bca:	e0e7      	b.n	8006d9c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d002      	beq.n	8006bdc <USBD_StdEPReq+0xd4>
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d015      	beq.n	8006c06 <USBD_StdEPReq+0xfe>
 8006bda:	e02d      	b.n	8006c38 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <USBD_StdEPReq+0xf4>
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b80      	cmp	r3, #128	; 0x80
 8006be6:	d009      	beq.n	8006bfc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f8ef 	bl	8007dd0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f8eb 	bl	8007dd0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bfa:	e023      	b.n	8006c44 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fbfe 	bl	8007400 <USBD_CtlError>
        break;
 8006c04:	e01e      	b.n	8006c44 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d119      	bne.n	8006c42 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f8f6 	bl	8007e0e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fcb7 	bl	8007596 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
        }
        break;
 8006c36:	e004      	b.n	8006c42 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fbe0 	bl	8007400 <USBD_CtlError>
        break;
 8006c40:	e000      	b.n	8006c44 <USBD_StdEPReq+0x13c>
        break;
 8006c42:	bf00      	nop
      }
      break;
 8006c44:	e0aa      	b.n	8006d9c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d002      	beq.n	8006c56 <USBD_StdEPReq+0x14e>
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d032      	beq.n	8006cba <USBD_StdEPReq+0x1b2>
 8006c54:	e097      	b.n	8006d86 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d007      	beq.n	8006c6c <USBD_StdEPReq+0x164>
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d004      	beq.n	8006c6c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fbcb 	bl	8007400 <USBD_CtlError>
          break;
 8006c6a:	e091      	b.n	8006d90 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da0b      	bge.n	8006c8c <USBD_StdEPReq+0x184>
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	3310      	adds	r3, #16
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	e00b      	b.n	8006ca4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fc15 	bl	80074e2 <USBD_CtlSendData>
        break;
 8006cb8:	e06a      	b.n	8006d90 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da11      	bge.n	8006ce6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3324      	adds	r3, #36	; 0x24
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d117      	bne.n	8006d0c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fb8e 	bl	8007400 <USBD_CtlError>
            break;
 8006ce4:	e054      	b.n	8006d90 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb7b 	bl	8007400 <USBD_CtlError>
            break;
 8006d0a:	e041      	b.n	8006d90 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	da0b      	bge.n	8006d2c <USBD_StdEPReq+0x224>
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	3310      	adds	r3, #16
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	4413      	add	r3, r2
 8006d28:	3304      	adds	r3, #4
 8006d2a:	e00b      	b.n	8006d44 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	4413      	add	r3, r2
 8006d42:	3304      	adds	r3, #4
 8006d44:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <USBD_StdEPReq+0x24a>
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d103      	bne.n	8006d5a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e00e      	b.n	8006d78 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 f874 	bl	8007e4c <USBD_LL_IsStallEP>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fbaf 	bl	80074e2 <USBD_CtlSendData>
          break;
 8006d84:	e004      	b.n	8006d90 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb39 	bl	8007400 <USBD_CtlError>
        break;
 8006d8e:	bf00      	nop
      }
      break;
 8006d90:	e004      	b.n	8006d9c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fb33 	bl	8007400 <USBD_CtlError>
      break;
 8006d9a:	bf00      	nop
    }
    break;
 8006d9c:	e004      	b.n	8006da8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb2d 	bl	8007400 <USBD_CtlError>
    break;
 8006da6:	bf00      	nop
  }

  return ret;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	0a1b      	lsrs	r3, r3, #8
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	2b06      	cmp	r3, #6
 8006dd6:	f200 8128 	bhi.w	800702a <USBD_GetDescriptor+0x276>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBD_GetDescriptor+0x2c>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	08006e15 	.word	0x08006e15
 8006de8:	08006e55 	.word	0x08006e55
 8006dec:	0800702b 	.word	0x0800702b
 8006df0:	0800702b 	.word	0x0800702b
 8006df4:	08006fcb 	.word	0x08006fcb
 8006df8:	08006ff7 	.word	0x08006ff7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7c12      	ldrb	r2, [r2, #16]
 8006e08:	f107 0108 	add.w	r1, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
    break;
 8006e12:	e112      	b.n	800703a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	7c1b      	ldrb	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10d      	bne.n	8006e38 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	f107 0208 	add.w	r2, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	2202      	movs	r2, #2
 8006e34:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e36:	e100      	b.n	800703a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	f107 0208 	add.w	r2, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	2202      	movs	r2, #2
 8006e50:	701a      	strb	r2, [r3, #0]
    break;
 8006e52:	e0f2      	b.n	800703a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	885b      	ldrh	r3, [r3, #2]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	f200 80ac 	bhi.w	8006fb8 <USBD_GetDescriptor+0x204>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBD_GetDescriptor+0xb4>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e81 	.word	0x08006e81
 8006e6c:	08006eb5 	.word	0x08006eb5
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006f1d 	.word	0x08006f1d
 8006e78:	08006f51 	.word	0x08006f51
 8006e7c:	08006f85 	.word	0x08006f85
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ea2:	e091      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 faaa 	bl	8007400 <USBD_CtlError>
        err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb2:	e089      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7c12      	ldrb	r2, [r2, #16]
 8006ecc:	f107 0108 	add.w	r1, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed6:	e077      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa90 	bl	8007400 <USBD_CtlError>
        err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee6:	e06f      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f0a:	e05d      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa76 	bl	8007400 <USBD_CtlError>
        err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1a:	e055      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3e:	e043      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa5c 	bl	8007400 <USBD_CtlError>
        err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4e:	e03b      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	f107 0108 	add.w	r1, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f72:	e029      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa42 	bl	8007400 <USBD_CtlError>
        err++;
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	72fb      	strb	r3, [r7, #11]
      break;
 8006f82:	e021      	b.n	8006fc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7c12      	ldrb	r2, [r2, #16]
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
 8006fa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa6:	e00f      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa28 	bl	8007400 <USBD_CtlError>
        err++;
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb6:	e007      	b.n	8006fc8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa20 	bl	8007400 <USBD_CtlError>
      err++;
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006fc6:	bf00      	nop
    }
    break;
 8006fc8:	e037      	b.n	800703a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7c1b      	ldrb	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fda:	f107 0208 	add.w	r2, r7, #8
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4798      	blx	r3
 8006fe2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006fe4:	e029      	b.n	800703a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fa09 	bl	8007400 <USBD_CtlError>
      err++;
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	72fb      	strb	r3, [r7, #11]
    break;
 8006ff4:	e021      	b.n	800703a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	f107 0208 	add.w	r2, r7, #8
 800700a:	4610      	mov	r0, r2
 800700c:	4798      	blx	r3
 800700e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	2207      	movs	r2, #7
 8007016:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007018:	e00f      	b.n	800703a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f9ef 	bl	8007400 <USBD_CtlError>
      err++;
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	3301      	adds	r3, #1
 8007026:	72fb      	strb	r3, [r7, #11]
    break;
 8007028:	e007      	b.n	800703a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9e7 	bl	8007400 <USBD_CtlError>
    err++;
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	3301      	adds	r3, #1
 8007036:	72fb      	strb	r3, [r7, #11]
    break;
 8007038:	bf00      	nop
  }

  if (err != 0U)
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d11e      	bne.n	800707e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	88db      	ldrh	r3, [r3, #6]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d016      	beq.n	8007076 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007048:	893b      	ldrh	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88da      	ldrh	r2, [r3, #6]
 8007052:	893b      	ldrh	r3, [r7, #8]
 8007054:	4293      	cmp	r3, r2
 8007056:	bf28      	it	cs
 8007058:	4613      	movcs	r3, r2
 800705a:	b29b      	uxth	r3, r3
 800705c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	461a      	mov	r2, r3
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa3c 	bl	80074e2 <USBD_CtlSendData>
 800706a:	e009      	b.n	8007080 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9c6 	bl	8007400 <USBD_CtlError>
 8007074:	e004      	b.n	8007080 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa8d 	bl	8007596 <USBD_CtlSendStatus>
 800707c:	e000      	b.n	8007080 <USBD_GetDescriptor+0x2cc>
    return;
 800707e:	bf00      	nop
    }
  }
}
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop

08007088 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	889b      	ldrh	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d130      	bne.n	80070fc <USBD_SetAddress+0x74>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	88db      	ldrh	r3, [r3, #6]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d12c      	bne.n	80070fc <USBD_SetAddress+0x74>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	885b      	ldrh	r3, [r3, #2]
 80070a6:	2b7f      	cmp	r3, #127	; 0x7f
 80070a8:	d828      	bhi.n	80070fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	885b      	ldrh	r3, [r3, #2]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d104      	bne.n	80070ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f99c 	bl	8007400 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c8:	e01c      	b.n	8007104 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7bfa      	ldrb	r2, [r7, #15]
 80070ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fee4 	bl	8007ea4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fa5a 	bl	8007596 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d004      	beq.n	80070f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f0:	e008      	b.n	8007104 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fa:	e003      	b.n	8007104 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f97e 	bl	8007400 <USBD_CtlError>
  }
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	4b4b      	ldr	r3, [pc, #300]	; (8007250 <USBD_SetConfig+0x144>)
 8007122:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007124:	4b4a      	ldr	r3, [pc, #296]	; (8007250 <USBD_SetConfig+0x144>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d905      	bls.n	8007138 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f966 	bl	8007400 <USBD_CtlError>
    return USBD_FAIL;
 8007134:	2303      	movs	r3, #3
 8007136:	e087      	b.n	8007248 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713e:	2b02      	cmp	r3, #2
 8007140:	d002      	beq.n	8007148 <USBD_SetConfig+0x3c>
 8007142:	2b03      	cmp	r3, #3
 8007144:	d025      	beq.n	8007192 <USBD_SetConfig+0x86>
 8007146:	e071      	b.n	800722c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007148:	4b41      	ldr	r3, [pc, #260]	; (8007250 <USBD_SetConfig+0x144>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01c      	beq.n	800718a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007150:	4b3f      	ldr	r3, [pc, #252]	; (8007250 <USBD_SetConfig+0x144>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800715a:	4b3d      	ldr	r3, [pc, #244]	; (8007250 <USBD_SetConfig+0x144>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff f9a7 	bl	80064b4 <USBD_SetClassConfig>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f944 	bl	8007400 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007178:	e065      	b.n	8007246 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa0b 	bl	8007596 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2203      	movs	r2, #3
 8007184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007188:	e05d      	b.n	8007246 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa03 	bl	8007596 <USBD_CtlSendStatus>
    break;
 8007190:	e059      	b.n	8007246 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007192:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <USBD_SetConfig+0x144>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d112      	bne.n	80071c0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80071a2:	4b2b      	ldr	r3, [pc, #172]	; (8007250 <USBD_SetConfig+0x144>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ac:	4b28      	ldr	r3, [pc, #160]	; (8007250 <USBD_SetConfig+0x144>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff f99a 	bl	80064ec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9ec 	bl	8007596 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80071be:	e042      	b.n	8007246 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80071c0:	4b23      	ldr	r3, [pc, #140]	; (8007250 <USBD_SetConfig+0x144>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d02a      	beq.n	8007224 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff f988 	bl	80064ec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80071dc:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <USBD_SetConfig+0x144>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80071e6:	4b1a      	ldr	r3, [pc, #104]	; (8007250 <USBD_SetConfig+0x144>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff f961 	bl	80064b4 <USBD_SetClassConfig>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00f      	beq.n	800721c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8fe 	bl	8007400 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff f96d 	bl	80064ec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800721a:	e014      	b.n	8007246 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f9ba 	bl	8007596 <USBD_CtlSendStatus>
    break;
 8007222:	e010      	b.n	8007246 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9b6 	bl	8007596 <USBD_CtlSendStatus>
    break;
 800722a:	e00c      	b.n	8007246 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8e6 	bl	8007400 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <USBD_SetConfig+0x144>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff f956 	bl	80064ec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	bf00      	nop
  }

  return ret;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000204 	.word	0x20000204

08007254 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	88db      	ldrh	r3, [r3, #6]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d004      	beq.n	8007270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f8c9 	bl	8007400 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800726e:	e021      	b.n	80072b4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	2b01      	cmp	r3, #1
 8007278:	db17      	blt.n	80072aa <USBD_GetConfig+0x56>
 800727a:	2b02      	cmp	r3, #2
 800727c:	dd02      	ble.n	8007284 <USBD_GetConfig+0x30>
 800727e:	2b03      	cmp	r3, #3
 8007280:	d00b      	beq.n	800729a <USBD_GetConfig+0x46>
 8007282:	e012      	b.n	80072aa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3308      	adds	r3, #8
 800728e:	2201      	movs	r2, #1
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f925 	bl	80074e2 <USBD_CtlSendData>
      break;
 8007298:	e00c      	b.n	80072b4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	2201      	movs	r2, #1
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f91d 	bl	80074e2 <USBD_CtlSendData>
      break;
 80072a8:	e004      	b.n	80072b4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8a7 	bl	8007400 <USBD_CtlError>
      break;
 80072b2:	bf00      	nop
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	3b01      	subs	r3, #1
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d81e      	bhi.n	8007310 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	88db      	ldrh	r3, [r3, #6]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d004      	beq.n	80072e4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f88f 	bl	8007400 <USBD_CtlError>
      break;
 80072e2:	e01a      	b.n	800731a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f043 0202 	orr.w	r2, r3, #2
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	330c      	adds	r3, #12
 8007304:	2202      	movs	r2, #2
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8ea 	bl	80074e2 <USBD_CtlSendData>
    break;
 800730e:	e004      	b.n	800731a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f874 	bl	8007400 <USBD_CtlError>
    break;
 8007318:	bf00      	nop
  }
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	885b      	ldrh	r3, [r3, #2]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d106      	bne.n	8007342 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f92a 	bl	8007596 <USBD_CtlSendStatus>
  }
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735a:	3b01      	subs	r3, #1
 800735c:	2b02      	cmp	r3, #2
 800735e:	d80b      	bhi.n	8007378 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	885b      	ldrh	r3, [r3, #2]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d10c      	bne.n	8007382 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f910 	bl	8007596 <USBD_CtlSendStatus>
      }
      break;
 8007376:	e004      	b.n	8007382 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f840 	bl	8007400 <USBD_CtlError>
      break;
 8007380:	e000      	b.n	8007384 <USBD_ClrFeature+0x3a>
      break;
 8007382:	bf00      	nop
  }
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	781a      	ldrb	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fad3 	bl	8006962 <SWAPBYTE>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3301      	adds	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff fac6 	bl	8006962 <SWAPBYTE>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461a      	mov	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3301      	adds	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff fab9 	bl	8006962 <SWAPBYTE>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	80da      	strh	r2, [r3, #6]
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fcdf 	bl	8007dd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007412:	2100      	movs	r1, #0
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fcdb 	bl	8007dd0 <USBD_LL_StallEP>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d036      	beq.n	80074a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800743c:	6938      	ldr	r0, [r7, #16]
 800743e:	f000 f836 	bl	80074ae <USBD_GetLen>
 8007442:	4603      	mov	r3, r0
 8007444:	3301      	adds	r3, #1
 8007446:	b29b      	uxth	r3, r3
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4413      	add	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	701a      	strb	r2, [r3, #0]
  idx++;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	3301      	adds	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	4413      	add	r3, r2
 8007468:	2203      	movs	r2, #3
 800746a:	701a      	strb	r2, [r3, #0]
  idx++;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	3301      	adds	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007472:	e013      	b.n	800749c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4413      	add	r3, r2
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	7812      	ldrb	r2, [r2, #0]
 800747e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	3301      	adds	r3, #1
 8007484:	613b      	str	r3, [r7, #16]
    idx++;
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	3301      	adds	r3, #1
 800748a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	4413      	add	r3, r2
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]
    idx++;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	3301      	adds	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e7      	bne.n	8007474 <USBD_GetString+0x52>
 80074a4:	e000      	b.n	80074a8 <USBD_GetString+0x86>
    return;
 80074a6:	bf00      	nop
  }
}
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074be:	e005      	b.n	80074cc <USBD_GetLen+0x1e>
  {
    len++;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	3301      	adds	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f5      	bne.n	80074c0 <USBD_GetLen+0x12>
  }

  return len;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	2100      	movs	r1, #0
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fcea 	bl	8007ee2 <USBD_LL_Transmit>

  return USBD_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fcd9 	bl	8007ee2 <USBD_LL_Transmit>

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2203      	movs	r2, #3
 800754a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	2100      	movs	r1, #0
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fcdd 	bl	8007f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	2100      	movs	r1, #0
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fccc 	bl	8007f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2204      	movs	r2, #4
 80075a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075a6:	2300      	movs	r3, #0
 80075a8:	2200      	movs	r2, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fc98 	bl	8007ee2 <USBD_LL_Transmit>

  return USBD_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2205      	movs	r2, #5
 80075c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075cc:	2300      	movs	r3, #0
 80075ce:	2200      	movs	r2, #0
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fca6 	bl	8007f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075e8:	2200      	movs	r2, #0
 80075ea:	4912      	ldr	r1, [pc, #72]	; (8007634 <MX_USB_DEVICE_Init+0x50>)
 80075ec:	4812      	ldr	r0, [pc, #72]	; (8007638 <MX_USB_DEVICE_Init+0x54>)
 80075ee:	f7fe fef3 	bl	80063d8 <USBD_Init>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075f8:	f7f9 fdc2 	bl	8001180 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075fc:	490f      	ldr	r1, [pc, #60]	; (800763c <MX_USB_DEVICE_Init+0x58>)
 80075fe:	480e      	ldr	r0, [pc, #56]	; (8007638 <MX_USB_DEVICE_Init+0x54>)
 8007600:	f7fe ff20 	bl	8006444 <USBD_RegisterClass>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800760a:	f7f9 fdb9 	bl	8001180 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800760e:	490c      	ldr	r1, [pc, #48]	; (8007640 <MX_USB_DEVICE_Init+0x5c>)
 8007610:	4809      	ldr	r0, [pc, #36]	; (8007638 <MX_USB_DEVICE_Init+0x54>)
 8007612:	f7fe fe45 	bl	80062a0 <USBD_CDC_RegisterInterface>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800761c:	f7f9 fdb0 	bl	8001180 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007620:	4805      	ldr	r0, [pc, #20]	; (8007638 <MX_USB_DEVICE_Init+0x54>)
 8007622:	f7fe ff30 	bl	8006486 <USBD_Start>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800762c:	f7f9 fda8 	bl	8001180 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007630:	bf00      	nop
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000130 	.word	0x20000130
 8007638:	20000268 	.word	0x20000268
 800763c:	20000018 	.word	0x20000018
 8007640:	2000011c 	.word	0x2000011c

08007644 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007648:	2200      	movs	r2, #0
 800764a:	4905      	ldr	r1, [pc, #20]	; (8007660 <CDC_Init_FS+0x1c>)
 800764c:	4805      	ldr	r0, [pc, #20]	; (8007664 <CDC_Init_FS+0x20>)
 800764e:	f7fe fe3c 	bl	80062ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007652:	4905      	ldr	r1, [pc, #20]	; (8007668 <CDC_Init_FS+0x24>)
 8007654:	4803      	ldr	r0, [pc, #12]	; (8007664 <CDC_Init_FS+0x20>)
 8007656:	f7fe fe51 	bl	80062fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800765a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800765c:	4618      	mov	r0, r3
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000d38 	.word	0x20000d38
 8007664:	20000268 	.word	0x20000268
 8007668:	20000538 	.word	0x20000538

0800766c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007670:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007672:	4618      	mov	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	6039      	str	r1, [r7, #0]
 8007686:	71fb      	strb	r3, [r7, #7]
 8007688:	4613      	mov	r3, r2
 800768a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b23      	cmp	r3, #35	; 0x23
 8007690:	d84a      	bhi.n	8007728 <CDC_Control_FS+0xac>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <CDC_Control_FS+0x1c>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	08007729 	.word	0x08007729
 800769c:	08007729 	.word	0x08007729
 80076a0:	08007729 	.word	0x08007729
 80076a4:	08007729 	.word	0x08007729
 80076a8:	08007729 	.word	0x08007729
 80076ac:	08007729 	.word	0x08007729
 80076b0:	08007729 	.word	0x08007729
 80076b4:	08007729 	.word	0x08007729
 80076b8:	08007729 	.word	0x08007729
 80076bc:	08007729 	.word	0x08007729
 80076c0:	08007729 	.word	0x08007729
 80076c4:	08007729 	.word	0x08007729
 80076c8:	08007729 	.word	0x08007729
 80076cc:	08007729 	.word	0x08007729
 80076d0:	08007729 	.word	0x08007729
 80076d4:	08007729 	.word	0x08007729
 80076d8:	08007729 	.word	0x08007729
 80076dc:	08007729 	.word	0x08007729
 80076e0:	08007729 	.word	0x08007729
 80076e4:	08007729 	.word	0x08007729
 80076e8:	08007729 	.word	0x08007729
 80076ec:	08007729 	.word	0x08007729
 80076f0:	08007729 	.word	0x08007729
 80076f4:	08007729 	.word	0x08007729
 80076f8:	08007729 	.word	0x08007729
 80076fc:	08007729 	.word	0x08007729
 8007700:	08007729 	.word	0x08007729
 8007704:	08007729 	.word	0x08007729
 8007708:	08007729 	.word	0x08007729
 800770c:	08007729 	.word	0x08007729
 8007710:	08007729 	.word	0x08007729
 8007714:	08007729 	.word	0x08007729
 8007718:	08007729 	.word	0x08007729
 800771c:	08007729 	.word	0x08007729
 8007720:	08007729 	.word	0x08007729
 8007724:	08007729 	.word	0x08007729
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007728:	bf00      	nop
  }

  return (USBD_OK);
 800772a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	4805      	ldr	r0, [pc, #20]	; (800775c <CDC_Receive_FS+0x24>)
 8007746:	f7fe fdd9 	bl	80062fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800774a:	4804      	ldr	r0, [pc, #16]	; (800775c <CDC_Receive_FS+0x24>)
 800774c:	f7fe fe1a 	bl	8006384 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007750:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000268 	.word	0x20000268

08007760 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007770:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <CDC_Transmit_FS+0x48>)
 8007772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007776:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007782:	2301      	movs	r3, #1
 8007784:	e00b      	b.n	800779e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	461a      	mov	r2, r3
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4806      	ldr	r0, [pc, #24]	; (80077a8 <CDC_Transmit_FS+0x48>)
 800778e:	f7fe fd9c 	bl	80062ca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007792:	4805      	ldr	r0, [pc, #20]	; (80077a8 <CDC_Transmit_FS+0x48>)
 8007794:	f7fe fdc6 	bl	8006324 <USBD_CDC_TransmitPacket>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000268 	.word	0x20000268

080077ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2212      	movs	r2, #18
 80077e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	2000014c 	.word	0x2000014c

080077f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2204      	movs	r2, #4
 8007804:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007806:	4b03      	ldr	r3, [pc, #12]	; (8007814 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	20000160 	.word	0x20000160

08007818 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d105      	bne.n	8007836 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4907      	ldr	r1, [pc, #28]	; (800784c <USBD_FS_ProductStrDescriptor+0x34>)
 800782e:	4808      	ldr	r0, [pc, #32]	; (8007850 <USBD_FS_ProductStrDescriptor+0x38>)
 8007830:	f7ff fdf7 	bl	8007422 <USBD_GetString>
 8007834:	e004      	b.n	8007840 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4904      	ldr	r1, [pc, #16]	; (800784c <USBD_FS_ProductStrDescriptor+0x34>)
 800783a:	4805      	ldr	r0, [pc, #20]	; (8007850 <USBD_FS_ProductStrDescriptor+0x38>)
 800783c:	f7ff fdf1 	bl	8007422 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20001538 	.word	0x20001538
 8007850:	080088a8 	.word	0x080088a8

08007854 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	6039      	str	r1, [r7, #0]
 800785e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4904      	ldr	r1, [pc, #16]	; (8007874 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007864:	4804      	ldr	r0, [pc, #16]	; (8007878 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007866:	f7ff fddc 	bl	8007422 <USBD_GetString>
  return USBD_StrDesc;
 800786a:	4b02      	ldr	r3, [pc, #8]	; (8007874 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20001538 	.word	0x20001538
 8007878:	080088c0 	.word	0x080088c0

0800787c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	221a      	movs	r2, #26
 800788c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800788e:	f000 f843 	bl	8007918 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007892:	4b02      	ldr	r3, [pc, #8]	; (800789c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000164 	.word	0x20000164

080078a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	6039      	str	r1, [r7, #0]
 80078aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4907      	ldr	r1, [pc, #28]	; (80078d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078b6:	4808      	ldr	r0, [pc, #32]	; (80078d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078b8:	f7ff fdb3 	bl	8007422 <USBD_GetString>
 80078bc:	e004      	b.n	80078c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4904      	ldr	r1, [pc, #16]	; (80078d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078c2:	4805      	ldr	r0, [pc, #20]	; (80078d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078c4:	f7ff fdad 	bl	8007422 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c8:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20001538 	.word	0x20001538
 80078d8:	080088d4 	.word	0x080088d4

080078dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	6039      	str	r1, [r7, #0]
 80078e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4907      	ldr	r1, [pc, #28]	; (8007910 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078f2:	4808      	ldr	r0, [pc, #32]	; (8007914 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078f4:	f7ff fd95 	bl	8007422 <USBD_GetString>
 80078f8:	e004      	b.n	8007904 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078fe:	4805      	ldr	r0, [pc, #20]	; (8007914 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007900:	f7ff fd8f 	bl	8007422 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20001538 	.word	0x20001538
 8007914:	080088e0 	.word	0x080088e0

08007918 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <Get_SerialNum+0x44>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007924:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <Get_SerialNum+0x48>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <Get_SerialNum+0x4c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4413      	add	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800793e:	2208      	movs	r2, #8
 8007940:	4909      	ldr	r1, [pc, #36]	; (8007968 <Get_SerialNum+0x50>)
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f814 	bl	8007970 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007948:	2204      	movs	r2, #4
 800794a:	4908      	ldr	r1, [pc, #32]	; (800796c <Get_SerialNum+0x54>)
 800794c:	68b8      	ldr	r0, [r7, #8]
 800794e:	f000 f80f 	bl	8007970 <IntToUnicode>
  }
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	1fff7a10 	.word	0x1fff7a10
 8007960:	1fff7a14 	.word	0x1fff7a14
 8007964:	1fff7a18 	.word	0x1fff7a18
 8007968:	20000166 	.word	0x20000166
 800796c:	20000176 	.word	0x20000176

08007970 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]
 8007986:	e027      	b.n	80079d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	0f1b      	lsrs	r3, r3, #28
 800798c:	2b09      	cmp	r3, #9
 800798e:	d80b      	bhi.n	80079a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	0f1b      	lsrs	r3, r3, #28
 8007994:	b2da      	uxtb	r2, r3
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	4619      	mov	r1, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	440b      	add	r3, r1
 80079a0:	3230      	adds	r2, #48	; 0x30
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	e00a      	b.n	80079be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	0f1b      	lsrs	r3, r3, #28
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4619      	mov	r1, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	440b      	add	r3, r1
 80079b8:	3237      	adds	r2, #55	; 0x37
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	3301      	adds	r3, #1
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4413      	add	r3, r2
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	3301      	adds	r3, #1
 80079d6:	75fb      	strb	r3, [r7, #23]
 80079d8:	7dfa      	ldrb	r2, [r7, #23]
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d3d3      	bcc.n	8007988 <IntToUnicode+0x18>
  }
}
 80079e0:	bf00      	nop
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	605a      	str	r2, [r3, #4]
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a0c:	d13a      	bne.n	8007a84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	4a1d      	ldr	r2, [pc, #116]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a18:	f043 0301 	orr.w	r3, r3, #1
 8007a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a1e:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a30:	2302      	movs	r3, #2
 8007a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a3c:	230a      	movs	r3, #10
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	4619      	mov	r1, r3
 8007a46:	4812      	ldr	r0, [pc, #72]	; (8007a90 <HAL_PCD_MspInit+0xa4>)
 8007a48:	f7f9 fe88 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a50:	4a0e      	ldr	r2, [pc, #56]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	6353      	str	r3, [r2, #52]	; 0x34
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a60:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a66:	6453      	str	r3, [r2, #68]	; 0x44
 8007a68:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <HAL_PCD_MspInit+0xa0>)
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a74:	2200      	movs	r2, #0
 8007a76:	2100      	movs	r1, #0
 8007a78:	2043      	movs	r0, #67	; 0x43
 8007a7a:	f7f9 fe38 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a7e:	2043      	movs	r0, #67	; 0x43
 8007a80:	f7f9 fe51 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a84:	bf00      	nop
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	40020000 	.word	0x40020000

08007a94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f7fe fd36 	bl	800651c <USBD_LL_SetupStage>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	1a9b      	subs	r3, r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f7fe fd6e 	bl	80065c2 <USBD_LL_DataOutStage>
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4613      	mov	r3, r2
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	3348      	adds	r3, #72	; 0x48
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f7fe fdb7 	bl	8006688 <USBD_LL_DataInStage>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe febb 	bl	80068ac <USBD_LL_SOF>
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b46:	2301      	movs	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d102      	bne.n	8007b58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
 8007b56:	e008      	b.n	8007b6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d102      	bne.n	8007b66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
 8007b64:	e001      	b.n	8007b6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b66:	f7f9 fb0b 	bl	8001180 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b70:	7bfa      	ldrb	r2, [r7, #15]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fe5e 	bl	8006836 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fe17 	bl	80067b4 <USBD_LL_Reset>
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fe59 	bl	8006856 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bb6:	f043 0301 	orr.w	r3, r3, #1
 8007bba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <HAL_PCD_SuspendCallback+0x48>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	4a03      	ldr	r2, [pc, #12]	; (8007bd8 <HAL_PCD_SuspendCallback+0x48>)
 8007bca:	f043 0306 	orr.w	r3, r3, #6
 8007bce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed00 	.word	0xe000ed00

08007bdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fe48 	bl	8006880 <USBD_LL_Resume>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fe73 	bl	80068fa <USBD_LL_IsoOUTIncomplete>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fe54 	bl	80068e0 <USBD_LL_IsoINIncomplete>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fe60 	bl	8006914 <USBD_LL_DevConnected>
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fe5d 	bl	800692a <USBD_LL_DevDisconnected>
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d13c      	bne.n	8007d02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c88:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <USBD_LL_Init+0x94>)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a1e      	ldr	r2, [pc, #120]	; (8007d0c <USBD_LL_Init+0x94>)
 8007c94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c98:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <USBD_LL_Init+0x94>)
 8007c9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <USBD_LL_Init+0x94>)
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ca6:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <USBD_LL_Init+0x94>)
 8007ca8:	2202      	movs	r2, #2
 8007caa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cac:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cb2:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cb8:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cc4:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <USBD_LL_Init+0x94>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cd6:	480d      	ldr	r0, [pc, #52]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cd8:	f7fa ffa7 	bl	8002c2a <HAL_PCD_Init>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ce2:	f7f9 fa4d 	bl	8001180 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ce6:	2180      	movs	r1, #128	; 0x80
 8007ce8:	4808      	ldr	r0, [pc, #32]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cea:	f7fc f904 	bl	8003ef6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cee:	2240      	movs	r2, #64	; 0x40
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4806      	ldr	r0, [pc, #24]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cf4:	f7fc f8b8 	bl	8003e68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	4803      	ldr	r0, [pc, #12]	; (8007d0c <USBD_LL_Init+0x94>)
 8007cfe:	f7fc f8b3 	bl	8003e68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20001738 	.word	0x20001738

08007d10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb f89c 	bl	8002e64 <HAL_PCD_Start>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 f92a 	bl	8007f8c <USBD_Get_USB_Status>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4611      	mov	r1, r2
 8007d52:	461a      	mov	r2, r3
 8007d54:	4603      	mov	r3, r0
 8007d56:	70fb      	strb	r3, [r7, #3]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70bb      	strb	r3, [r7, #2]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d6e:	78bb      	ldrb	r3, [r7, #2]
 8007d70:	883a      	ldrh	r2, [r7, #0]
 8007d72:	78f9      	ldrb	r1, [r7, #3]
 8007d74:	f7fb fc80 	bl	8003678 <HAL_PCD_EP_Open>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f904 	bl	8007f8c <USBD_Get_USB_Status>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fb fcc9 	bl	8003748 <HAL_PCD_EP_Close>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f8e5 	bl	8007f8c <USBD_Get_USB_Status>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	4611      	mov	r1, r2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fb fda1 	bl	8003936 <HAL_PCD_EP_SetStall>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f8c6 	bl	8007f8c <USBD_Get_USB_Status>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fb fde6 	bl	80039fe <HAL_PCD_EP_ClrStall>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f8a7 	bl	8007f8c <USBD_Get_USB_Status>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da0b      	bge.n	8007e80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	333e      	adds	r3, #62	; 0x3e
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	e00b      	b.n	8007e98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fb fbb3 	bl	800362e <HAL_PCD_SetAddress>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f85c 	bl	8007f8c <USBD_Get_USB_Status>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b086      	sub	sp, #24
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f00:	7af9      	ldrb	r1, [r7, #11]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	f7fb fccc 	bl	80038a2 <HAL_PCD_EP_Transmit>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 f83b 	bl	8007f8c <USBD_Get_USB_Status>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	460b      	mov	r3, r1
 8007f32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f42:	7af9      	ldrb	r1, [r7, #11]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	f7fb fc48 	bl	80037dc <HAL_PCD_EP_Receive>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f81a 	bl	8007f8c <USBD_Get_USB_Status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fb fc78 	bl	8003872 <HAL_PCD_EP_GetRxCount>
 8007f82:	4603      	mov	r3, r0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d817      	bhi.n	8007fd0 <USBD_Get_USB_Status+0x44>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <USBD_Get_USB_Status+0x1c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fb9 	.word	0x08007fb9
 8007fac:	08007fbf 	.word	0x08007fbf
 8007fb0:	08007fc5 	.word	0x08007fc5
 8007fb4:	08007fcb 	.word	0x08007fcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbc:	e00b      	b.n	8007fd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc2:	e008      	b.n	8007fd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc8:	e005      	b.n	8007fd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fce:	e002      	b.n	8007fd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd4:	bf00      	nop
  }
  return usb_status;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <__errno>:
 8007fe4:	4b01      	ldr	r3, [pc, #4]	; (8007fec <__errno+0x8>)
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000180 	.word	0x20000180

08007ff0 <__libc_init_array>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4e0d      	ldr	r6, [pc, #52]	; (8008028 <__libc_init_array+0x38>)
 8007ff4:	4c0d      	ldr	r4, [pc, #52]	; (800802c <__libc_init_array+0x3c>)
 8007ff6:	1ba4      	subs	r4, r4, r6
 8007ff8:	10a4      	asrs	r4, r4, #2
 8007ffa:	2500      	movs	r5, #0
 8007ffc:	42a5      	cmp	r5, r4
 8007ffe:	d109      	bne.n	8008014 <__libc_init_array+0x24>
 8008000:	4e0b      	ldr	r6, [pc, #44]	; (8008030 <__libc_init_array+0x40>)
 8008002:	4c0c      	ldr	r4, [pc, #48]	; (8008034 <__libc_init_array+0x44>)
 8008004:	f000 fc36 	bl	8008874 <_init>
 8008008:	1ba4      	subs	r4, r4, r6
 800800a:	10a4      	asrs	r4, r4, #2
 800800c:	2500      	movs	r5, #0
 800800e:	42a5      	cmp	r5, r4
 8008010:	d105      	bne.n	800801e <__libc_init_array+0x2e>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008018:	4798      	blx	r3
 800801a:	3501      	adds	r5, #1
 800801c:	e7ee      	b.n	8007ffc <__libc_init_array+0xc>
 800801e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008022:	4798      	blx	r3
 8008024:	3501      	adds	r5, #1
 8008026:	e7f2      	b.n	800800e <__libc_init_array+0x1e>
 8008028:	08008944 	.word	0x08008944
 800802c:	08008944 	.word	0x08008944
 8008030:	08008944 	.word	0x08008944
 8008034:	08008948 	.word	0x08008948

08008038 <malloc>:
 8008038:	4b02      	ldr	r3, [pc, #8]	; (8008044 <malloc+0xc>)
 800803a:	4601      	mov	r1, r0
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	f000 b861 	b.w	8008104 <_malloc_r>
 8008042:	bf00      	nop
 8008044:	20000180 	.word	0x20000180

08008048 <free>:
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <free+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f000 b80b 	b.w	8008068 <_free_r>
 8008052:	bf00      	nop
 8008054:	20000180 	.word	0x20000180

08008058 <memset>:
 8008058:	4402      	add	r2, r0
 800805a:	4603      	mov	r3, r0
 800805c:	4293      	cmp	r3, r2
 800805e:	d100      	bne.n	8008062 <memset+0xa>
 8008060:	4770      	bx	lr
 8008062:	f803 1b01 	strb.w	r1, [r3], #1
 8008066:	e7f9      	b.n	800805c <memset+0x4>

08008068 <_free_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4605      	mov	r5, r0
 800806c:	2900      	cmp	r1, #0
 800806e:	d045      	beq.n	80080fc <_free_r+0x94>
 8008070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008074:	1f0c      	subs	r4, r1, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfb8      	it	lt
 800807a:	18e4      	addlt	r4, r4, r3
 800807c:	f000 f8cc 	bl	8008218 <__malloc_lock>
 8008080:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <_free_r+0x98>)
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	4610      	mov	r0, r2
 8008086:	b933      	cbnz	r3, 8008096 <_free_r+0x2e>
 8008088:	6063      	str	r3, [r4, #4]
 800808a:	6014      	str	r4, [r2, #0]
 800808c:	4628      	mov	r0, r5
 800808e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008092:	f000 b8c2 	b.w	800821a <__malloc_unlock>
 8008096:	42a3      	cmp	r3, r4
 8008098:	d90c      	bls.n	80080b4 <_free_r+0x4c>
 800809a:	6821      	ldr	r1, [r4, #0]
 800809c:	1862      	adds	r2, r4, r1
 800809e:	4293      	cmp	r3, r2
 80080a0:	bf04      	itt	eq
 80080a2:	681a      	ldreq	r2, [r3, #0]
 80080a4:	685b      	ldreq	r3, [r3, #4]
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	bf04      	itt	eq
 80080aa:	1852      	addeq	r2, r2, r1
 80080ac:	6022      	streq	r2, [r4, #0]
 80080ae:	6004      	str	r4, [r0, #0]
 80080b0:	e7ec      	b.n	800808c <_free_r+0x24>
 80080b2:	4613      	mov	r3, r2
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	b10a      	cbz	r2, 80080bc <_free_r+0x54>
 80080b8:	42a2      	cmp	r2, r4
 80080ba:	d9fa      	bls.n	80080b2 <_free_r+0x4a>
 80080bc:	6819      	ldr	r1, [r3, #0]
 80080be:	1858      	adds	r0, r3, r1
 80080c0:	42a0      	cmp	r0, r4
 80080c2:	d10b      	bne.n	80080dc <_free_r+0x74>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	4401      	add	r1, r0
 80080c8:	1858      	adds	r0, r3, r1
 80080ca:	4282      	cmp	r2, r0
 80080cc:	6019      	str	r1, [r3, #0]
 80080ce:	d1dd      	bne.n	800808c <_free_r+0x24>
 80080d0:	6810      	ldr	r0, [r2, #0]
 80080d2:	6852      	ldr	r2, [r2, #4]
 80080d4:	605a      	str	r2, [r3, #4]
 80080d6:	4401      	add	r1, r0
 80080d8:	6019      	str	r1, [r3, #0]
 80080da:	e7d7      	b.n	800808c <_free_r+0x24>
 80080dc:	d902      	bls.n	80080e4 <_free_r+0x7c>
 80080de:	230c      	movs	r3, #12
 80080e0:	602b      	str	r3, [r5, #0]
 80080e2:	e7d3      	b.n	800808c <_free_r+0x24>
 80080e4:	6820      	ldr	r0, [r4, #0]
 80080e6:	1821      	adds	r1, r4, r0
 80080e8:	428a      	cmp	r2, r1
 80080ea:	bf04      	itt	eq
 80080ec:	6811      	ldreq	r1, [r2, #0]
 80080ee:	6852      	ldreq	r2, [r2, #4]
 80080f0:	6062      	str	r2, [r4, #4]
 80080f2:	bf04      	itt	eq
 80080f4:	1809      	addeq	r1, r1, r0
 80080f6:	6021      	streq	r1, [r4, #0]
 80080f8:	605c      	str	r4, [r3, #4]
 80080fa:	e7c7      	b.n	800808c <_free_r+0x24>
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	bf00      	nop
 8008100:	20000208 	.word	0x20000208

08008104 <_malloc_r>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	1ccd      	adds	r5, r1, #3
 8008108:	f025 0503 	bic.w	r5, r5, #3
 800810c:	3508      	adds	r5, #8
 800810e:	2d0c      	cmp	r5, #12
 8008110:	bf38      	it	cc
 8008112:	250c      	movcc	r5, #12
 8008114:	2d00      	cmp	r5, #0
 8008116:	4606      	mov	r6, r0
 8008118:	db01      	blt.n	800811e <_malloc_r+0x1a>
 800811a:	42a9      	cmp	r1, r5
 800811c:	d903      	bls.n	8008126 <_malloc_r+0x22>
 800811e:	230c      	movs	r3, #12
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	2000      	movs	r0, #0
 8008124:	bd70      	pop	{r4, r5, r6, pc}
 8008126:	f000 f877 	bl	8008218 <__malloc_lock>
 800812a:	4a21      	ldr	r2, [pc, #132]	; (80081b0 <_malloc_r+0xac>)
 800812c:	6814      	ldr	r4, [r2, #0]
 800812e:	4621      	mov	r1, r4
 8008130:	b991      	cbnz	r1, 8008158 <_malloc_r+0x54>
 8008132:	4c20      	ldr	r4, [pc, #128]	; (80081b4 <_malloc_r+0xb0>)
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	b91b      	cbnz	r3, 8008140 <_malloc_r+0x3c>
 8008138:	4630      	mov	r0, r6
 800813a:	f000 f83d 	bl	80081b8 <_sbrk_r>
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	4629      	mov	r1, r5
 8008142:	4630      	mov	r0, r6
 8008144:	f000 f838 	bl	80081b8 <_sbrk_r>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d124      	bne.n	8008196 <_malloc_r+0x92>
 800814c:	230c      	movs	r3, #12
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	4630      	mov	r0, r6
 8008152:	f000 f862 	bl	800821a <__malloc_unlock>
 8008156:	e7e4      	b.n	8008122 <_malloc_r+0x1e>
 8008158:	680b      	ldr	r3, [r1, #0]
 800815a:	1b5b      	subs	r3, r3, r5
 800815c:	d418      	bmi.n	8008190 <_malloc_r+0x8c>
 800815e:	2b0b      	cmp	r3, #11
 8008160:	d90f      	bls.n	8008182 <_malloc_r+0x7e>
 8008162:	600b      	str	r3, [r1, #0]
 8008164:	50cd      	str	r5, [r1, r3]
 8008166:	18cc      	adds	r4, r1, r3
 8008168:	4630      	mov	r0, r6
 800816a:	f000 f856 	bl	800821a <__malloc_unlock>
 800816e:	f104 000b 	add.w	r0, r4, #11
 8008172:	1d23      	adds	r3, r4, #4
 8008174:	f020 0007 	bic.w	r0, r0, #7
 8008178:	1ac3      	subs	r3, r0, r3
 800817a:	d0d3      	beq.n	8008124 <_malloc_r+0x20>
 800817c:	425a      	negs	r2, r3
 800817e:	50e2      	str	r2, [r4, r3]
 8008180:	e7d0      	b.n	8008124 <_malloc_r+0x20>
 8008182:	428c      	cmp	r4, r1
 8008184:	684b      	ldr	r3, [r1, #4]
 8008186:	bf16      	itet	ne
 8008188:	6063      	strne	r3, [r4, #4]
 800818a:	6013      	streq	r3, [r2, #0]
 800818c:	460c      	movne	r4, r1
 800818e:	e7eb      	b.n	8008168 <_malloc_r+0x64>
 8008190:	460c      	mov	r4, r1
 8008192:	6849      	ldr	r1, [r1, #4]
 8008194:	e7cc      	b.n	8008130 <_malloc_r+0x2c>
 8008196:	1cc4      	adds	r4, r0, #3
 8008198:	f024 0403 	bic.w	r4, r4, #3
 800819c:	42a0      	cmp	r0, r4
 800819e:	d005      	beq.n	80081ac <_malloc_r+0xa8>
 80081a0:	1a21      	subs	r1, r4, r0
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 f808 	bl	80081b8 <_sbrk_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d0cf      	beq.n	800814c <_malloc_r+0x48>
 80081ac:	6025      	str	r5, [r4, #0]
 80081ae:	e7db      	b.n	8008168 <_malloc_r+0x64>
 80081b0:	20000208 	.word	0x20000208
 80081b4:	2000020c 	.word	0x2000020c

080081b8 <_sbrk_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4c06      	ldr	r4, [pc, #24]	; (80081d4 <_sbrk_r+0x1c>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4605      	mov	r5, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	f7f9 f8ae 	bl	8001324 <_sbrk>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_sbrk_r+0x1a>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_sbrk_r+0x1a>
 80081d0:	602b      	str	r3, [r5, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20001b40 	.word	0x20001b40

080081d8 <siprintf>:
 80081d8:	b40e      	push	{r1, r2, r3}
 80081da:	b500      	push	{lr}
 80081dc:	b09c      	sub	sp, #112	; 0x70
 80081de:	ab1d      	add	r3, sp, #116	; 0x74
 80081e0:	9002      	str	r0, [sp, #8]
 80081e2:	9006      	str	r0, [sp, #24]
 80081e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081e8:	4809      	ldr	r0, [pc, #36]	; (8008210 <siprintf+0x38>)
 80081ea:	9107      	str	r1, [sp, #28]
 80081ec:	9104      	str	r1, [sp, #16]
 80081ee:	4909      	ldr	r1, [pc, #36]	; (8008214 <siprintf+0x3c>)
 80081f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f4:	9105      	str	r1, [sp, #20]
 80081f6:	6800      	ldr	r0, [r0, #0]
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	a902      	add	r1, sp, #8
 80081fc:	f000 f868 	bl	80082d0 <_svfiprintf_r>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	b01c      	add	sp, #112	; 0x70
 8008208:	f85d eb04 	ldr.w	lr, [sp], #4
 800820c:	b003      	add	sp, #12
 800820e:	4770      	bx	lr
 8008210:	20000180 	.word	0x20000180
 8008214:	ffff0208 	.word	0xffff0208

08008218 <__malloc_lock>:
 8008218:	4770      	bx	lr

0800821a <__malloc_unlock>:
 800821a:	4770      	bx	lr

0800821c <__ssputs_r>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	688e      	ldr	r6, [r1, #8]
 8008222:	429e      	cmp	r6, r3
 8008224:	4682      	mov	sl, r0
 8008226:	460c      	mov	r4, r1
 8008228:	4690      	mov	r8, r2
 800822a:	4699      	mov	r9, r3
 800822c:	d837      	bhi.n	800829e <__ssputs_r+0x82>
 800822e:	898a      	ldrh	r2, [r1, #12]
 8008230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008234:	d031      	beq.n	800829a <__ssputs_r+0x7e>
 8008236:	6825      	ldr	r5, [r4, #0]
 8008238:	6909      	ldr	r1, [r1, #16]
 800823a:	1a6f      	subs	r7, r5, r1
 800823c:	6965      	ldr	r5, [r4, #20]
 800823e:	2302      	movs	r3, #2
 8008240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008244:	fb95 f5f3 	sdiv	r5, r5, r3
 8008248:	f109 0301 	add.w	r3, r9, #1
 800824c:	443b      	add	r3, r7
 800824e:	429d      	cmp	r5, r3
 8008250:	bf38      	it	cc
 8008252:	461d      	movcc	r5, r3
 8008254:	0553      	lsls	r3, r2, #21
 8008256:	d530      	bpl.n	80082ba <__ssputs_r+0x9e>
 8008258:	4629      	mov	r1, r5
 800825a:	f7ff ff53 	bl	8008104 <_malloc_r>
 800825e:	4606      	mov	r6, r0
 8008260:	b950      	cbnz	r0, 8008278 <__ssputs_r+0x5c>
 8008262:	230c      	movs	r3, #12
 8008264:	f8ca 3000 	str.w	r3, [sl]
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	463a      	mov	r2, r7
 800827a:	6921      	ldr	r1, [r4, #16]
 800827c:	f000 faa8 	bl	80087d0 <memcpy>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	6126      	str	r6, [r4, #16]
 800828e:	6165      	str	r5, [r4, #20]
 8008290:	443e      	add	r6, r7
 8008292:	1bed      	subs	r5, r5, r7
 8008294:	6026      	str	r6, [r4, #0]
 8008296:	60a5      	str	r5, [r4, #8]
 8008298:	464e      	mov	r6, r9
 800829a:	454e      	cmp	r6, r9
 800829c:	d900      	bls.n	80082a0 <__ssputs_r+0x84>
 800829e:	464e      	mov	r6, r9
 80082a0:	4632      	mov	r2, r6
 80082a2:	4641      	mov	r1, r8
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	f000 fa9e 	bl	80087e6 <memmove>
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	1b9b      	subs	r3, r3, r6
 80082ae:	60a3      	str	r3, [r4, #8]
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	441e      	add	r6, r3
 80082b4:	6026      	str	r6, [r4, #0]
 80082b6:	2000      	movs	r0, #0
 80082b8:	e7dc      	b.n	8008274 <__ssputs_r+0x58>
 80082ba:	462a      	mov	r2, r5
 80082bc:	f000 faac 	bl	8008818 <_realloc_r>
 80082c0:	4606      	mov	r6, r0
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1e2      	bne.n	800828c <__ssputs_r+0x70>
 80082c6:	6921      	ldr	r1, [r4, #16]
 80082c8:	4650      	mov	r0, sl
 80082ca:	f7ff fecd 	bl	8008068 <_free_r>
 80082ce:	e7c8      	b.n	8008262 <__ssputs_r+0x46>

080082d0 <_svfiprintf_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	461d      	mov	r5, r3
 80082d6:	898b      	ldrh	r3, [r1, #12]
 80082d8:	061f      	lsls	r7, r3, #24
 80082da:	b09d      	sub	sp, #116	; 0x74
 80082dc:	4680      	mov	r8, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4616      	mov	r6, r2
 80082e2:	d50f      	bpl.n	8008304 <_svfiprintf_r+0x34>
 80082e4:	690b      	ldr	r3, [r1, #16]
 80082e6:	b96b      	cbnz	r3, 8008304 <_svfiprintf_r+0x34>
 80082e8:	2140      	movs	r1, #64	; 0x40
 80082ea:	f7ff ff0b 	bl	8008104 <_malloc_r>
 80082ee:	6020      	str	r0, [r4, #0]
 80082f0:	6120      	str	r0, [r4, #16]
 80082f2:	b928      	cbnz	r0, 8008300 <_svfiprintf_r+0x30>
 80082f4:	230c      	movs	r3, #12
 80082f6:	f8c8 3000 	str.w	r3, [r8]
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082fe:	e0c8      	b.n	8008492 <_svfiprintf_r+0x1c2>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	2300      	movs	r3, #0
 8008306:	9309      	str	r3, [sp, #36]	; 0x24
 8008308:	2320      	movs	r3, #32
 800830a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830e:	2330      	movs	r3, #48	; 0x30
 8008310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008314:	9503      	str	r5, [sp, #12]
 8008316:	f04f 0b01 	mov.w	fp, #1
 800831a:	4637      	mov	r7, r6
 800831c:	463d      	mov	r5, r7
 800831e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008322:	b10b      	cbz	r3, 8008328 <_svfiprintf_r+0x58>
 8008324:	2b25      	cmp	r3, #37	; 0x25
 8008326:	d13e      	bne.n	80083a6 <_svfiprintf_r+0xd6>
 8008328:	ebb7 0a06 	subs.w	sl, r7, r6
 800832c:	d00b      	beq.n	8008346 <_svfiprintf_r+0x76>
 800832e:	4653      	mov	r3, sl
 8008330:	4632      	mov	r2, r6
 8008332:	4621      	mov	r1, r4
 8008334:	4640      	mov	r0, r8
 8008336:	f7ff ff71 	bl	800821c <__ssputs_r>
 800833a:	3001      	adds	r0, #1
 800833c:	f000 80a4 	beq.w	8008488 <_svfiprintf_r+0x1b8>
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	4453      	add	r3, sl
 8008344:	9309      	str	r3, [sp, #36]	; 0x24
 8008346:	783b      	ldrb	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 809d 	beq.w	8008488 <_svfiprintf_r+0x1b8>
 800834e:	2300      	movs	r3, #0
 8008350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008360:	931a      	str	r3, [sp, #104]	; 0x68
 8008362:	462f      	mov	r7, r5
 8008364:	2205      	movs	r2, #5
 8008366:	f817 1b01 	ldrb.w	r1, [r7], #1
 800836a:	4850      	ldr	r0, [pc, #320]	; (80084ac <_svfiprintf_r+0x1dc>)
 800836c:	f7f7 ff38 	bl	80001e0 <memchr>
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	b9d0      	cbnz	r0, 80083aa <_svfiprintf_r+0xda>
 8008374:	06d9      	lsls	r1, r3, #27
 8008376:	bf44      	itt	mi
 8008378:	2220      	movmi	r2, #32
 800837a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800837e:	071a      	lsls	r2, r3, #28
 8008380:	bf44      	itt	mi
 8008382:	222b      	movmi	r2, #43	; 0x2b
 8008384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008388:	782a      	ldrb	r2, [r5, #0]
 800838a:	2a2a      	cmp	r2, #42	; 0x2a
 800838c:	d015      	beq.n	80083ba <_svfiprintf_r+0xea>
 800838e:	9a07      	ldr	r2, [sp, #28]
 8008390:	462f      	mov	r7, r5
 8008392:	2000      	movs	r0, #0
 8008394:	250a      	movs	r5, #10
 8008396:	4639      	mov	r1, r7
 8008398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839c:	3b30      	subs	r3, #48	; 0x30
 800839e:	2b09      	cmp	r3, #9
 80083a0:	d94d      	bls.n	800843e <_svfiprintf_r+0x16e>
 80083a2:	b1b8      	cbz	r0, 80083d4 <_svfiprintf_r+0x104>
 80083a4:	e00f      	b.n	80083c6 <_svfiprintf_r+0xf6>
 80083a6:	462f      	mov	r7, r5
 80083a8:	e7b8      	b.n	800831c <_svfiprintf_r+0x4c>
 80083aa:	4a40      	ldr	r2, [pc, #256]	; (80084ac <_svfiprintf_r+0x1dc>)
 80083ac:	1a80      	subs	r0, r0, r2
 80083ae:	fa0b f000 	lsl.w	r0, fp, r0
 80083b2:	4318      	orrs	r0, r3
 80083b4:	9004      	str	r0, [sp, #16]
 80083b6:	463d      	mov	r5, r7
 80083b8:	e7d3      	b.n	8008362 <_svfiprintf_r+0x92>
 80083ba:	9a03      	ldr	r2, [sp, #12]
 80083bc:	1d11      	adds	r1, r2, #4
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	db01      	blt.n	80083ca <_svfiprintf_r+0xfa>
 80083c6:	9207      	str	r2, [sp, #28]
 80083c8:	e004      	b.n	80083d4 <_svfiprintf_r+0x104>
 80083ca:	4252      	negs	r2, r2
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	9207      	str	r2, [sp, #28]
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	783b      	ldrb	r3, [r7, #0]
 80083d6:	2b2e      	cmp	r3, #46	; 0x2e
 80083d8:	d10c      	bne.n	80083f4 <_svfiprintf_r+0x124>
 80083da:	787b      	ldrb	r3, [r7, #1]
 80083dc:	2b2a      	cmp	r3, #42	; 0x2a
 80083de:	d133      	bne.n	8008448 <_svfiprintf_r+0x178>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	1d1a      	adds	r2, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9203      	str	r2, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfb8      	it	lt
 80083ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083f0:	3702      	adds	r7, #2
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	4d2e      	ldr	r5, [pc, #184]	; (80084b0 <_svfiprintf_r+0x1e0>)
 80083f6:	7839      	ldrb	r1, [r7, #0]
 80083f8:	2203      	movs	r2, #3
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7f7 fef0 	bl	80001e0 <memchr>
 8008400:	b138      	cbz	r0, 8008412 <_svfiprintf_r+0x142>
 8008402:	2340      	movs	r3, #64	; 0x40
 8008404:	1b40      	subs	r0, r0, r5
 8008406:	fa03 f000 	lsl.w	r0, r3, r0
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	4303      	orrs	r3, r0
 800840e:	3701      	adds	r7, #1
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	7839      	ldrb	r1, [r7, #0]
 8008414:	4827      	ldr	r0, [pc, #156]	; (80084b4 <_svfiprintf_r+0x1e4>)
 8008416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800841a:	2206      	movs	r2, #6
 800841c:	1c7e      	adds	r6, r7, #1
 800841e:	f7f7 fedf 	bl	80001e0 <memchr>
 8008422:	2800      	cmp	r0, #0
 8008424:	d038      	beq.n	8008498 <_svfiprintf_r+0x1c8>
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <_svfiprintf_r+0x1e8>)
 8008428:	bb13      	cbnz	r3, 8008470 <_svfiprintf_r+0x1a0>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	3307      	adds	r3, #7
 800842e:	f023 0307 	bic.w	r3, r3, #7
 8008432:	3308      	adds	r3, #8
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008438:	444b      	add	r3, r9
 800843a:	9309      	str	r3, [sp, #36]	; 0x24
 800843c:	e76d      	b.n	800831a <_svfiprintf_r+0x4a>
 800843e:	fb05 3202 	mla	r2, r5, r2, r3
 8008442:	2001      	movs	r0, #1
 8008444:	460f      	mov	r7, r1
 8008446:	e7a6      	b.n	8008396 <_svfiprintf_r+0xc6>
 8008448:	2300      	movs	r3, #0
 800844a:	3701      	adds	r7, #1
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	4619      	mov	r1, r3
 8008450:	250a      	movs	r5, #10
 8008452:	4638      	mov	r0, r7
 8008454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008458:	3a30      	subs	r2, #48	; 0x30
 800845a:	2a09      	cmp	r2, #9
 800845c:	d903      	bls.n	8008466 <_svfiprintf_r+0x196>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0c8      	beq.n	80083f4 <_svfiprintf_r+0x124>
 8008462:	9105      	str	r1, [sp, #20]
 8008464:	e7c6      	b.n	80083f4 <_svfiprintf_r+0x124>
 8008466:	fb05 2101 	mla	r1, r5, r1, r2
 800846a:	2301      	movs	r3, #1
 800846c:	4607      	mov	r7, r0
 800846e:	e7f0      	b.n	8008452 <_svfiprintf_r+0x182>
 8008470:	ab03      	add	r3, sp, #12
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4622      	mov	r2, r4
 8008476:	4b11      	ldr	r3, [pc, #68]	; (80084bc <_svfiprintf_r+0x1ec>)
 8008478:	a904      	add	r1, sp, #16
 800847a:	4640      	mov	r0, r8
 800847c:	f3af 8000 	nop.w
 8008480:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008484:	4681      	mov	r9, r0
 8008486:	d1d6      	bne.n	8008436 <_svfiprintf_r+0x166>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	065b      	lsls	r3, r3, #25
 800848c:	f53f af35 	bmi.w	80082fa <_svfiprintf_r+0x2a>
 8008490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008492:	b01d      	add	sp, #116	; 0x74
 8008494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008498:	ab03      	add	r3, sp, #12
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4622      	mov	r2, r4
 800849e:	4b07      	ldr	r3, [pc, #28]	; (80084bc <_svfiprintf_r+0x1ec>)
 80084a0:	a904      	add	r1, sp, #16
 80084a2:	4640      	mov	r0, r8
 80084a4:	f000 f882 	bl	80085ac <_printf_i>
 80084a8:	e7ea      	b.n	8008480 <_svfiprintf_r+0x1b0>
 80084aa:	bf00      	nop
 80084ac:	08008908 	.word	0x08008908
 80084b0:	0800890e 	.word	0x0800890e
 80084b4:	08008912 	.word	0x08008912
 80084b8:	00000000 	.word	0x00000000
 80084bc:	0800821d 	.word	0x0800821d

080084c0 <_printf_common>:
 80084c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	4691      	mov	r9, r2
 80084c6:	461f      	mov	r7, r3
 80084c8:	688a      	ldr	r2, [r1, #8]
 80084ca:	690b      	ldr	r3, [r1, #16]
 80084cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	bfb8      	it	lt
 80084d4:	4613      	movlt	r3, r2
 80084d6:	f8c9 3000 	str.w	r3, [r9]
 80084da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084de:	4606      	mov	r6, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	b112      	cbz	r2, 80084ea <_printf_common+0x2a>
 80084e4:	3301      	adds	r3, #1
 80084e6:	f8c9 3000 	str.w	r3, [r9]
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	0699      	lsls	r1, r3, #26
 80084ee:	bf42      	ittt	mi
 80084f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80084f4:	3302      	addmi	r3, #2
 80084f6:	f8c9 3000 	strmi.w	r3, [r9]
 80084fa:	6825      	ldr	r5, [r4, #0]
 80084fc:	f015 0506 	ands.w	r5, r5, #6
 8008500:	d107      	bne.n	8008512 <_printf_common+0x52>
 8008502:	f104 0a19 	add.w	sl, r4, #25
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	f8d9 2000 	ldr.w	r2, [r9]
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	42ab      	cmp	r3, r5
 8008510:	dc28      	bgt.n	8008564 <_printf_common+0xa4>
 8008512:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008516:	6822      	ldr	r2, [r4, #0]
 8008518:	3300      	adds	r3, #0
 800851a:	bf18      	it	ne
 800851c:	2301      	movne	r3, #1
 800851e:	0692      	lsls	r2, r2, #26
 8008520:	d42d      	bmi.n	800857e <_printf_common+0xbe>
 8008522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008526:	4639      	mov	r1, r7
 8008528:	4630      	mov	r0, r6
 800852a:	47c0      	blx	r8
 800852c:	3001      	adds	r0, #1
 800852e:	d020      	beq.n	8008572 <_printf_common+0xb2>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	68e5      	ldr	r5, [r4, #12]
 8008534:	f8d9 2000 	ldr.w	r2, [r9]
 8008538:	f003 0306 	and.w	r3, r3, #6
 800853c:	2b04      	cmp	r3, #4
 800853e:	bf08      	it	eq
 8008540:	1aad      	subeq	r5, r5, r2
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	6922      	ldr	r2, [r4, #16]
 8008546:	bf0c      	ite	eq
 8008548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800854c:	2500      	movne	r5, #0
 800854e:	4293      	cmp	r3, r2
 8008550:	bfc4      	itt	gt
 8008552:	1a9b      	subgt	r3, r3, r2
 8008554:	18ed      	addgt	r5, r5, r3
 8008556:	f04f 0900 	mov.w	r9, #0
 800855a:	341a      	adds	r4, #26
 800855c:	454d      	cmp	r5, r9
 800855e:	d11a      	bne.n	8008596 <_printf_common+0xd6>
 8008560:	2000      	movs	r0, #0
 8008562:	e008      	b.n	8008576 <_printf_common+0xb6>
 8008564:	2301      	movs	r3, #1
 8008566:	4652      	mov	r2, sl
 8008568:	4639      	mov	r1, r7
 800856a:	4630      	mov	r0, r6
 800856c:	47c0      	blx	r8
 800856e:	3001      	adds	r0, #1
 8008570:	d103      	bne.n	800857a <_printf_common+0xba>
 8008572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	3501      	adds	r5, #1
 800857c:	e7c3      	b.n	8008506 <_printf_common+0x46>
 800857e:	18e1      	adds	r1, r4, r3
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	2030      	movs	r0, #48	; 0x30
 8008584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008588:	4422      	add	r2, r4
 800858a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800858e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008592:	3302      	adds	r3, #2
 8008594:	e7c5      	b.n	8008522 <_printf_common+0x62>
 8008596:	2301      	movs	r3, #1
 8008598:	4622      	mov	r2, r4
 800859a:	4639      	mov	r1, r7
 800859c:	4630      	mov	r0, r6
 800859e:	47c0      	blx	r8
 80085a0:	3001      	adds	r0, #1
 80085a2:	d0e6      	beq.n	8008572 <_printf_common+0xb2>
 80085a4:	f109 0901 	add.w	r9, r9, #1
 80085a8:	e7d8      	b.n	800855c <_printf_common+0x9c>
	...

080085ac <_printf_i>:
 80085ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80085b4:	460c      	mov	r4, r1
 80085b6:	7e09      	ldrb	r1, [r1, #24]
 80085b8:	b085      	sub	sp, #20
 80085ba:	296e      	cmp	r1, #110	; 0x6e
 80085bc:	4617      	mov	r7, r2
 80085be:	4606      	mov	r6, r0
 80085c0:	4698      	mov	r8, r3
 80085c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085c4:	f000 80b3 	beq.w	800872e <_printf_i+0x182>
 80085c8:	d822      	bhi.n	8008610 <_printf_i+0x64>
 80085ca:	2963      	cmp	r1, #99	; 0x63
 80085cc:	d036      	beq.n	800863c <_printf_i+0x90>
 80085ce:	d80a      	bhi.n	80085e6 <_printf_i+0x3a>
 80085d0:	2900      	cmp	r1, #0
 80085d2:	f000 80b9 	beq.w	8008748 <_printf_i+0x19c>
 80085d6:	2958      	cmp	r1, #88	; 0x58
 80085d8:	f000 8083 	beq.w	80086e2 <_printf_i+0x136>
 80085dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80085e4:	e032      	b.n	800864c <_printf_i+0xa0>
 80085e6:	2964      	cmp	r1, #100	; 0x64
 80085e8:	d001      	beq.n	80085ee <_printf_i+0x42>
 80085ea:	2969      	cmp	r1, #105	; 0x69
 80085ec:	d1f6      	bne.n	80085dc <_printf_i+0x30>
 80085ee:	6820      	ldr	r0, [r4, #0]
 80085f0:	6813      	ldr	r3, [r2, #0]
 80085f2:	0605      	lsls	r5, r0, #24
 80085f4:	f103 0104 	add.w	r1, r3, #4
 80085f8:	d52a      	bpl.n	8008650 <_printf_i+0xa4>
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6011      	str	r1, [r2, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da03      	bge.n	800860a <_printf_i+0x5e>
 8008602:	222d      	movs	r2, #45	; 0x2d
 8008604:	425b      	negs	r3, r3
 8008606:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800860a:	486f      	ldr	r0, [pc, #444]	; (80087c8 <_printf_i+0x21c>)
 800860c:	220a      	movs	r2, #10
 800860e:	e039      	b.n	8008684 <_printf_i+0xd8>
 8008610:	2973      	cmp	r1, #115	; 0x73
 8008612:	f000 809d 	beq.w	8008750 <_printf_i+0x1a4>
 8008616:	d808      	bhi.n	800862a <_printf_i+0x7e>
 8008618:	296f      	cmp	r1, #111	; 0x6f
 800861a:	d020      	beq.n	800865e <_printf_i+0xb2>
 800861c:	2970      	cmp	r1, #112	; 0x70
 800861e:	d1dd      	bne.n	80085dc <_printf_i+0x30>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	f043 0320 	orr.w	r3, r3, #32
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	e003      	b.n	8008632 <_printf_i+0x86>
 800862a:	2975      	cmp	r1, #117	; 0x75
 800862c:	d017      	beq.n	800865e <_printf_i+0xb2>
 800862e:	2978      	cmp	r1, #120	; 0x78
 8008630:	d1d4      	bne.n	80085dc <_printf_i+0x30>
 8008632:	2378      	movs	r3, #120	; 0x78
 8008634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008638:	4864      	ldr	r0, [pc, #400]	; (80087cc <_printf_i+0x220>)
 800863a:	e055      	b.n	80086e8 <_printf_i+0x13c>
 800863c:	6813      	ldr	r3, [r2, #0]
 800863e:	1d19      	adds	r1, r3, #4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6011      	str	r1, [r2, #0]
 8008644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800864c:	2301      	movs	r3, #1
 800864e:	e08c      	b.n	800876a <_printf_i+0x1be>
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6011      	str	r1, [r2, #0]
 8008654:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008658:	bf18      	it	ne
 800865a:	b21b      	sxthne	r3, r3
 800865c:	e7cf      	b.n	80085fe <_printf_i+0x52>
 800865e:	6813      	ldr	r3, [r2, #0]
 8008660:	6825      	ldr	r5, [r4, #0]
 8008662:	1d18      	adds	r0, r3, #4
 8008664:	6010      	str	r0, [r2, #0]
 8008666:	0628      	lsls	r0, r5, #24
 8008668:	d501      	bpl.n	800866e <_printf_i+0xc2>
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	e002      	b.n	8008674 <_printf_i+0xc8>
 800866e:	0668      	lsls	r0, r5, #25
 8008670:	d5fb      	bpl.n	800866a <_printf_i+0xbe>
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	4854      	ldr	r0, [pc, #336]	; (80087c8 <_printf_i+0x21c>)
 8008676:	296f      	cmp	r1, #111	; 0x6f
 8008678:	bf14      	ite	ne
 800867a:	220a      	movne	r2, #10
 800867c:	2208      	moveq	r2, #8
 800867e:	2100      	movs	r1, #0
 8008680:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008684:	6865      	ldr	r5, [r4, #4]
 8008686:	60a5      	str	r5, [r4, #8]
 8008688:	2d00      	cmp	r5, #0
 800868a:	f2c0 8095 	blt.w	80087b8 <_printf_i+0x20c>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	f021 0104 	bic.w	r1, r1, #4
 8008694:	6021      	str	r1, [r4, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d13d      	bne.n	8008716 <_printf_i+0x16a>
 800869a:	2d00      	cmp	r5, #0
 800869c:	f040 808e 	bne.w	80087bc <_printf_i+0x210>
 80086a0:	4665      	mov	r5, ip
 80086a2:	2a08      	cmp	r2, #8
 80086a4:	d10b      	bne.n	80086be <_printf_i+0x112>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	07db      	lsls	r3, r3, #31
 80086aa:	d508      	bpl.n	80086be <_printf_i+0x112>
 80086ac:	6923      	ldr	r3, [r4, #16]
 80086ae:	6862      	ldr	r2, [r4, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	bfde      	ittt	le
 80086b4:	2330      	movle	r3, #48	; 0x30
 80086b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086be:	ebac 0305 	sub.w	r3, ip, r5
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	f8cd 8000 	str.w	r8, [sp]
 80086c8:	463b      	mov	r3, r7
 80086ca:	aa03      	add	r2, sp, #12
 80086cc:	4621      	mov	r1, r4
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7ff fef6 	bl	80084c0 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d14d      	bne.n	8008774 <_printf_i+0x1c8>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086dc:	b005      	add	sp, #20
 80086de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e2:	4839      	ldr	r0, [pc, #228]	; (80087c8 <_printf_i+0x21c>)
 80086e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80086e8:	6813      	ldr	r3, [r2, #0]
 80086ea:	6821      	ldr	r1, [r4, #0]
 80086ec:	1d1d      	adds	r5, r3, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6015      	str	r5, [r2, #0]
 80086f2:	060a      	lsls	r2, r1, #24
 80086f4:	d50b      	bpl.n	800870e <_printf_i+0x162>
 80086f6:	07ca      	lsls	r2, r1, #31
 80086f8:	bf44      	itt	mi
 80086fa:	f041 0120 	orrmi.w	r1, r1, #32
 80086fe:	6021      	strmi	r1, [r4, #0]
 8008700:	b91b      	cbnz	r3, 800870a <_printf_i+0x15e>
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	f022 0220 	bic.w	r2, r2, #32
 8008708:	6022      	str	r2, [r4, #0]
 800870a:	2210      	movs	r2, #16
 800870c:	e7b7      	b.n	800867e <_printf_i+0xd2>
 800870e:	064d      	lsls	r5, r1, #25
 8008710:	bf48      	it	mi
 8008712:	b29b      	uxthmi	r3, r3
 8008714:	e7ef      	b.n	80086f6 <_printf_i+0x14a>
 8008716:	4665      	mov	r5, ip
 8008718:	fbb3 f1f2 	udiv	r1, r3, r2
 800871c:	fb02 3311 	mls	r3, r2, r1, r3
 8008720:	5cc3      	ldrb	r3, [r0, r3]
 8008722:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008726:	460b      	mov	r3, r1
 8008728:	2900      	cmp	r1, #0
 800872a:	d1f5      	bne.n	8008718 <_printf_i+0x16c>
 800872c:	e7b9      	b.n	80086a2 <_printf_i+0xf6>
 800872e:	6813      	ldr	r3, [r2, #0]
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	6961      	ldr	r1, [r4, #20]
 8008734:	1d18      	adds	r0, r3, #4
 8008736:	6010      	str	r0, [r2, #0]
 8008738:	0628      	lsls	r0, r5, #24
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	d501      	bpl.n	8008742 <_printf_i+0x196>
 800873e:	6019      	str	r1, [r3, #0]
 8008740:	e002      	b.n	8008748 <_printf_i+0x19c>
 8008742:	066a      	lsls	r2, r5, #25
 8008744:	d5fb      	bpl.n	800873e <_printf_i+0x192>
 8008746:	8019      	strh	r1, [r3, #0]
 8008748:	2300      	movs	r3, #0
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	4665      	mov	r5, ip
 800874e:	e7b9      	b.n	80086c4 <_printf_i+0x118>
 8008750:	6813      	ldr	r3, [r2, #0]
 8008752:	1d19      	adds	r1, r3, #4
 8008754:	6011      	str	r1, [r2, #0]
 8008756:	681d      	ldr	r5, [r3, #0]
 8008758:	6862      	ldr	r2, [r4, #4]
 800875a:	2100      	movs	r1, #0
 800875c:	4628      	mov	r0, r5
 800875e:	f7f7 fd3f 	bl	80001e0 <memchr>
 8008762:	b108      	cbz	r0, 8008768 <_printf_i+0x1bc>
 8008764:	1b40      	subs	r0, r0, r5
 8008766:	6060      	str	r0, [r4, #4]
 8008768:	6863      	ldr	r3, [r4, #4]
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	2300      	movs	r3, #0
 800876e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008772:	e7a7      	b.n	80086c4 <_printf_i+0x118>
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	462a      	mov	r2, r5
 8008778:	4639      	mov	r1, r7
 800877a:	4630      	mov	r0, r6
 800877c:	47c0      	blx	r8
 800877e:	3001      	adds	r0, #1
 8008780:	d0aa      	beq.n	80086d8 <_printf_i+0x12c>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	079b      	lsls	r3, r3, #30
 8008786:	d413      	bmi.n	80087b0 <_printf_i+0x204>
 8008788:	68e0      	ldr	r0, [r4, #12]
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	4298      	cmp	r0, r3
 800878e:	bfb8      	it	lt
 8008790:	4618      	movlt	r0, r3
 8008792:	e7a3      	b.n	80086dc <_printf_i+0x130>
 8008794:	2301      	movs	r3, #1
 8008796:	464a      	mov	r2, r9
 8008798:	4639      	mov	r1, r7
 800879a:	4630      	mov	r0, r6
 800879c:	47c0      	blx	r8
 800879e:	3001      	adds	r0, #1
 80087a0:	d09a      	beq.n	80086d8 <_printf_i+0x12c>
 80087a2:	3501      	adds	r5, #1
 80087a4:	68e3      	ldr	r3, [r4, #12]
 80087a6:	9a03      	ldr	r2, [sp, #12]
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	42ab      	cmp	r3, r5
 80087ac:	dcf2      	bgt.n	8008794 <_printf_i+0x1e8>
 80087ae:	e7eb      	b.n	8008788 <_printf_i+0x1dc>
 80087b0:	2500      	movs	r5, #0
 80087b2:	f104 0919 	add.w	r9, r4, #25
 80087b6:	e7f5      	b.n	80087a4 <_printf_i+0x1f8>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1ac      	bne.n	8008716 <_printf_i+0x16a>
 80087bc:	7803      	ldrb	r3, [r0, #0]
 80087be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c6:	e76c      	b.n	80086a2 <_printf_i+0xf6>
 80087c8:	08008919 	.word	0x08008919
 80087cc:	0800892a 	.word	0x0800892a

080087d0 <memcpy>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	1e43      	subs	r3, r0, #1
 80087d4:	440a      	add	r2, r1
 80087d6:	4291      	cmp	r1, r2
 80087d8:	d100      	bne.n	80087dc <memcpy+0xc>
 80087da:	bd10      	pop	{r4, pc}
 80087dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e4:	e7f7      	b.n	80087d6 <memcpy+0x6>

080087e6 <memmove>:
 80087e6:	4288      	cmp	r0, r1
 80087e8:	b510      	push	{r4, lr}
 80087ea:	eb01 0302 	add.w	r3, r1, r2
 80087ee:	d807      	bhi.n	8008800 <memmove+0x1a>
 80087f0:	1e42      	subs	r2, r0, #1
 80087f2:	4299      	cmp	r1, r3
 80087f4:	d00a      	beq.n	800880c <memmove+0x26>
 80087f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80087fe:	e7f8      	b.n	80087f2 <memmove+0xc>
 8008800:	4283      	cmp	r3, r0
 8008802:	d9f5      	bls.n	80087f0 <memmove+0xa>
 8008804:	1881      	adds	r1, r0, r2
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	42d3      	cmn	r3, r2
 800880a:	d100      	bne.n	800880e <memmove+0x28>
 800880c:	bd10      	pop	{r4, pc}
 800880e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008812:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008816:	e7f7      	b.n	8008808 <memmove+0x22>

08008818 <_realloc_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	4607      	mov	r7, r0
 800881c:	4614      	mov	r4, r2
 800881e:	460e      	mov	r6, r1
 8008820:	b921      	cbnz	r1, 800882c <_realloc_r+0x14>
 8008822:	4611      	mov	r1, r2
 8008824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008828:	f7ff bc6c 	b.w	8008104 <_malloc_r>
 800882c:	b922      	cbnz	r2, 8008838 <_realloc_r+0x20>
 800882e:	f7ff fc1b 	bl	8008068 <_free_r>
 8008832:	4625      	mov	r5, r4
 8008834:	4628      	mov	r0, r5
 8008836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008838:	f000 f814 	bl	8008864 <_malloc_usable_size_r>
 800883c:	42a0      	cmp	r0, r4
 800883e:	d20f      	bcs.n	8008860 <_realloc_r+0x48>
 8008840:	4621      	mov	r1, r4
 8008842:	4638      	mov	r0, r7
 8008844:	f7ff fc5e 	bl	8008104 <_malloc_r>
 8008848:	4605      	mov	r5, r0
 800884a:	2800      	cmp	r0, #0
 800884c:	d0f2      	beq.n	8008834 <_realloc_r+0x1c>
 800884e:	4631      	mov	r1, r6
 8008850:	4622      	mov	r2, r4
 8008852:	f7ff ffbd 	bl	80087d0 <memcpy>
 8008856:	4631      	mov	r1, r6
 8008858:	4638      	mov	r0, r7
 800885a:	f7ff fc05 	bl	8008068 <_free_r>
 800885e:	e7e9      	b.n	8008834 <_realloc_r+0x1c>
 8008860:	4635      	mov	r5, r6
 8008862:	e7e7      	b.n	8008834 <_realloc_r+0x1c>

08008864 <_malloc_usable_size_r>:
 8008864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008868:	1f18      	subs	r0, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfbc      	itt	lt
 800886e:	580b      	ldrlt	r3, [r1, r0]
 8008870:	18c0      	addlt	r0, r0, r3
 8008872:	4770      	bx	lr

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
